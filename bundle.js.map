{"version":3,"file":"bundle.js","mappings":"uCASAA,EAAOC,QANP,SAAwCC,GACtC,IAAIC,EAAmD,KACnDA,GACFD,EAAaE,aAAa,QAASD,EAEvC,C,sBCNA,IAAIE,EAAc,GAClB,SAASC,EAAqBC,GAE5B,IADA,IAAIC,GAAU,EACLC,EAAI,EAAGA,EAAIJ,EAAYK,OAAQD,IACtC,GAAIJ,EAAYI,GAAGF,aAAeA,EAAY,CAC5CC,EAASC,EACT,KACF,CAEF,OAAOD,CACT,CACA,SAASG,EAAaC,EAAMC,GAG1B,IAFA,IAAIC,EAAa,CAAC,EACdC,EAAc,GACTN,EAAI,EAAGA,EAAIG,EAAKF,OAAQD,IAAK,CACpC,IAAIO,EAAOJ,EAAKH,GACZQ,EAAKJ,EAAQK,KAAOF,EAAK,GAAKH,EAAQK,KAAOF,EAAK,GAClDG,EAAQL,EAAWG,IAAO,EAC1BV,EAAa,GAAGa,OAAOH,EAAI,KAAKG,OAAOD,GAC3CL,EAAWG,GAAME,EAAQ,EACzB,IAAIE,EAAoBf,EAAqBC,GACzCe,EAAM,CACRC,IAAKP,EAAK,GACVQ,MAAOR,EAAK,GACZS,UAAWT,EAAK,GAChBU,SAAUV,EAAK,GACfW,MAAOX,EAAK,IAEd,IAA2B,IAAvBK,EACFhB,EAAYgB,GAAmBO,aAC/BvB,EAAYgB,GAAmBQ,QAAQP,OAClC,CACL,IAAIO,EAAUC,EAAgBR,EAAKT,GACnCA,EAAQkB,QAAUtB,EAClBJ,EAAY2B,OAAOvB,EAAG,EAAG,CACvBF,WAAYA,EACZsB,QAASA,EACTD,WAAY,GAEhB,CACAb,EAAYkB,KAAK1B,EACnB,CACA,OAAOQ,CACT,CACA,SAASe,EAAgBR,EAAKT,GAC5B,IAAIqB,EAAMrB,EAAQsB,OAAOtB,GAYzB,OAXAqB,EAAIE,OAAOd,GACG,SAAiBe,GAC7B,GAAIA,EAAQ,CACV,GAAIA,EAAOd,MAAQD,EAAIC,KAAOc,EAAOb,QAAUF,EAAIE,OAASa,EAAOZ,YAAcH,EAAIG,WAAaY,EAAOX,WAAaJ,EAAII,UAAYW,EAAOV,QAAUL,EAAIK,MACzJ,OAEFO,EAAIE,OAAOd,EAAMe,EACnB,MACEH,EAAII,QAER,CAEF,CACAtC,EAAOC,QAAU,SAAUW,EAAMC,GAG/B,IAAI0B,EAAkB5B,EADtBC,EAAOA,GAAQ,GADfC,EAAUA,GAAW,CAAC,GAGtB,OAAO,SAAgB2B,GACrBA,EAAUA,GAAW,GACrB,IAAK,IAAI/B,EAAI,EAAGA,EAAI8B,EAAgB7B,OAAQD,IAAK,CAC/C,IACIgC,EAAQnC,EADKiC,EAAgB9B,IAEjCJ,EAAYoC,GAAOb,YACrB,CAEA,IADA,IAAIc,EAAqB/B,EAAa6B,EAAS3B,GACtC8B,EAAK,EAAGA,EAAKJ,EAAgB7B,OAAQiC,IAAM,CAClD,IACIC,EAAStC,EADKiC,EAAgBI,IAEK,IAAnCtC,EAAYuC,GAAQhB,aACtBvB,EAAYuC,GAAQf,UACpBxB,EAAY2B,OAAOY,EAAQ,GAE/B,CACAL,EAAkBG,CACpB,CACF,C,uBCtEA1C,EAAOC,QAVP,SAA2BsB,EAAKrB,GAC9B,GAAIA,EAAa2C,WACf3C,EAAa2C,WAAWC,QAAUvB,MAC7B,CACL,KAAOrB,EAAa6C,YAClB7C,EAAa8C,YAAY9C,EAAa6C,YAExC7C,EAAa+C,YAAYC,SAASC,eAAe5B,GACnD,CACF,C,6ECTI6B,E,MAA0B,GAA4B,KAE1DA,EAAwBnB,KAAK,CAACjC,EAAOiB,GAAI,2tDAwGrC,GAAG,CAAC,QAAU,EAAE,QAAU,CAAC,qCAAqC,MAAQ,GAAG,SAAW,u4BAAu4B,eAAiB,CAAC,4tDAA8tD,WAAa,MAE9tF,S,UC9GA,MAYMoC,EAAQ,QAERC,EAAW,WACXC,EAAiB,gBACjBC,EAAU,UACVC,EAAU,UACVC,EAAO,OACPC,EAAe,eACfC,EAAe,eACfC,EAAY,YACZC,EAAM,MACNC,EAAW,WACXC,EAAS,SACTC,EAAa,aACbC,EAAc,cACdC,EAAa,aACbC,EAAO,OACPC,EAAY,YACZC,EAAW,WACXC,EAAY,YACZC,EAAU,UACVC,EAAW,WACXC,EAAa,aACbC,EAAa,aACbC,EAAiB,iBACjBC,EAAc,cACdC,EAAU,UACVC,EAAa,aACbC,EAAU,UACVC,EAAgB,eAChBC,EAAS,SACTC,EAAe,cACfC,EAAY,YACZC,EAAa,aACbC,EAAc,cACdC,EAAO,OACPC,EAAW,WACXC,EAAS,SAETC,EAAY,CACdpC,EAAUC,EAAgBC,EAASC,EAASC,EAAMC,EAAcC,EAAcC,EAAWC,EAAKC,EAAUC,EAAQC,EAAYC,EAAaC,EACzIC,EAAMC,EAAWC,EAAUC,EAAWC,EAASC,EAAUC,EAAYC,EAAYC,EAAgBC,EAAaC,EAASC,EAAYC,EACnIC,EAAeC,EAAQC,EAAcC,EAAWC,EAAYC,EAAaC,EAAMC,EAAUC,EAAQpC,GAG/FsC,EAAa,CACfrC,EAAUC,EAAgBG,EAAMG,EAAWC,EAAKC,EAAUC,EAAQC,EAAYE,EAAYC,EAAMC,EAAWC,EAAUC,EAAWC,EAASC,EACzIC,EAAYC,EAAYC,EAAgBC,EAAaC,EAASC,EAAYM,EAAYE,EAAMC,EAAUC,GAG1GzF,EAAOC,QAAU,CACb2F,SA/Da,sFAgEbC,WA7De,YA8DfC,SA7Da,WA8DbC,UA7Dc,YA8DdC,iBA7DqB,kBA8DrBC,QA7DY,UA8DZC,SA7Da,WA8DbC,SA7Da,WA8DbC,KA5DS,OA6DT/C,QACAC,WACAC,iBACAC,UACAC,UACAC,OACAC,eACAC,eACAC,YACAC,MACAC,WACAC,SACAC,aACAC,cACAC,aACAC,OACAC,YACAC,WACAC,YACAC,UACAC,WACAC,aACAC,aACAC,iBACAC,cACAC,UACAC,aACAC,UACAC,gBACAC,SACAC,eACAC,YACAC,aACAC,cACAC,OACAC,WACAC,SACAC,YACAC,a,uBCzGJ3F,EAAOC,QAAU,SAAUoG,GACzB,IAAIzF,EAAO,GA4EX,OAzEAA,EAAK0F,SAAW,WACd,OAAOC,KAAKC,IAAI,SAAUxF,GACxB,IAAIyF,EAAU,GACVC,OAA+B,IAAZ1F,EAAK,GAoB5B,OAnBIA,EAAK,KACPyF,GAAW,cAAcrF,OAAOJ,EAAK,GAAI,QAEvCA,EAAK,KACPyF,GAAW,UAAUrF,OAAOJ,EAAK,GAAI,OAEnC0F,IACFD,GAAW,SAASrF,OAAOJ,EAAK,GAAGN,OAAS,EAAI,IAAIU,OAAOJ,EAAK,IAAM,GAAI,OAE5EyF,GAAWJ,EAAuBrF,GAC9B0F,IACFD,GAAW,KAETzF,EAAK,KACPyF,GAAW,KAETzF,EAAK,KACPyF,GAAW,KAENA,CACT,GAAGE,KAAK,GACV,EAGA/F,EAAKH,EAAI,SAAWmG,EAASpF,EAAOqF,EAAQnF,EAAUC,GAC7B,iBAAZiF,IACTA,EAAU,CAAC,CAAC,KAAMA,OAASE,KAE7B,IAAIC,EAAyB,CAAC,EAC9B,GAAIF,EACF,IAAK,IAAIG,EAAI,EAAGA,EAAIT,KAAK7F,OAAQsG,IAAK,CACpC,IAAI/F,EAAKsF,KAAKS,GAAG,GACP,MAAN/F,IACF8F,EAAuB9F,IAAM,EAEjC,CAEF,IAAK,IAAIgG,EAAK,EAAGA,EAAKL,EAAQlG,OAAQuG,IAAM,CAC1C,IAAIjG,EAAO,GAAGI,OAAOwF,EAAQK,IACzBJ,GAAUE,EAAuB/F,EAAK,WAGrB,IAAVW,SACc,IAAZX,EAAK,KAGdA,EAAK,GAAK,SAASI,OAAOJ,EAAK,GAAGN,OAAS,EAAI,IAAIU,OAAOJ,EAAK,IAAM,GAAI,MAAMI,OAAOJ,EAAK,GAAI,MAF/FA,EAAK,GAAKW,GAMVH,IACGR,EAAK,IAGRA,EAAK,GAAK,UAAUI,OAAOJ,EAAK,GAAI,MAAMI,OAAOJ,EAAK,GAAI,KAC1DA,EAAK,GAAKQ,GAHVR,EAAK,GAAKQ,GAMVE,IACGV,EAAK,IAGRA,EAAK,GAAK,cAAcI,OAAOJ,EAAK,GAAI,OAAOI,OAAOJ,EAAK,GAAI,KAC/DA,EAAK,GAAKU,GAHVV,EAAK,GAAK,GAAGI,OAAOM,IAMxBd,EAAKqB,KAAKjB,GACZ,CACF,EACOJ,CACT,C,uBClFAZ,EAAOC,QAAU,SAAUe,GACzB,IAAIyF,EAAUzF,EAAK,GACfkG,EAAalG,EAAK,GACtB,IAAKkG,EACH,OAAOT,EAET,GAAoB,mBAATU,KAAqB,CAC9B,IAAIC,EAASD,KAAKE,SAASC,mBAAmBC,KAAKC,UAAUN,MACzDO,EAAO,+DAA+DrG,OAAOgG,GAC7EM,EAAgB,OAAOtG,OAAOqG,EAAM,OACxC,MAAO,CAAChB,GAASrF,OAAO,CAACsG,IAAgBf,KAAK,KAChD,CACA,MAAO,CAACF,GAASE,KAAK,KACxB,C,uBCNA3G,EAAOC,QANP,SAA4BY,GAC1B,IAAI8G,EAAUzE,SAAS0E,cAAc,SAGrC,OAFA/G,EAAQgH,cAAcF,EAAS9G,EAAQiH,YACvCjH,EAAQkH,OAAOJ,EAAS9G,EAAQA,SACzB8G,CACT,C,uBCNA,IAAIK,EAAO,CAAC,EA+BZhI,EAAOC,QAPP,SAA0B8H,EAAQE,GAChC,IAAIC,EAtBN,SAAmBA,GACjB,QAA4B,IAAjBF,EAAKE,GAAyB,CACvC,IAAIC,EAAcjF,SAASkF,cAAcF,GAGzC,GAAIG,OAAOC,mBAAqBH,aAAuBE,OAAOC,kBAC5D,IAGEH,EAAcA,EAAYI,gBAAgBC,IAC5C,CAAE,MAAOC,GAEPN,EAAc,IAChB,CAEFH,EAAKE,GAAUC,CACjB,CACA,OAAOH,EAAKE,EACd,CAIeQ,CAAUX,GACvB,IAAKG,EACH,MAAM,IAAIS,MAAM,2GAElBT,EAAOjF,YAAYgF,EACrB,C,gBChCA,MAAM,uBAAEW,EAAsB,aAAEC,EAAY,cAAEC,GAAkB,EAAQ,MAClE,SAAElD,GAAa,EAAQ,KAE7B,MAAMmD,EASF,GAEA,WAAAC,CAAYC,EAAS,GAAIC,EAAUtD,GAC/BW,KAAK2C,QAAUA,EACf3C,KAAK0C,OAASA,EACd1C,MAAK,EAAe,CAAC,CACzB,CAUA,8BAAO4C,CAAwBC,EAAKC,GAChC,GAA2B,iBAAhBA,EACP,OAAOD,EAAIE,KAAKtI,GAAQA,EAAKuI,WAAaF,IAAgB,KACvD,GAA2B,iBAAhBA,EACd,OAAOD,EAAIC,IAAgB,KAE3B,MAAM,IAAIV,MAAM,6EAA6EU,IAErG,CAWA,2BAAOG,CAAqBJ,EAAKC,EAAa5B,GAE1C,GAAoB,iBAATA,GAA8B,OAATA,EAC5B,MAAM,IAAIkB,MAAM,kEAAkElB,KAGtF,GAA2B,iBAAhB4B,GAEP,IAAK,MAAMrI,KAAQoI,EACf,GAAIpI,EAAKuI,WAAaF,EAAa,CAE/BI,OAAOC,OAAO1I,EAAMyG,EAAM,CAAE8B,SAAUF,IACtC,KACJ,MAED,IAA2B,iBAAhBA,EAKd,MAAM,IAAIV,MAAM,gFAAgFU,KAHhG5B,EAAK8B,SAAWH,EAAIC,GAAaE,SACjCH,EAAIC,GAAe,IAAK5B,EAG5B,CACJ,CAWA,8BAAOkC,CAAwBP,EAAKC,EAAa5B,GAE7C,GAAoB,iBAATA,GAA8B,OAATA,EAC5B,MAAM,IAAIkB,MAAM,qEAAqElB,KAGzF,GAA2B,iBAAhB4B,GAEP,IAAK,MAAMrI,KAAQoI,EACf,GAAIpI,EAAKuI,WAAaF,EAAa,CAE/BI,OAAOC,OAAO1I,EAAMyG,GACpBzG,EAAKuI,SAAWF,EAChB,KACJ,MAED,IAA2B,iBAAhBA,EAKd,MAAM,IAAIV,MAAM,mFAAmFU,KAHnG5B,EAAK8B,SAAWH,EAAIC,GAAaE,SACjCE,OAAOC,OAAON,EAAIC,GAAc5B,EAGpC,CACJ,CAaA,sBAAMmC,CAAiBC,EAAUC,EAAW,GAAIC,EAAS,GAAIC,EAAY,KAAMC,EAAU,OAAQC,EAAW,IACxG,IACI,MAAMC,EAAS,IAAIC,gBAAgB,CAC/BJ,YACAE,WACAD,UACAI,IAAK9D,KAAK0C,SAERqB,EAAM,GAAG1E,KAAYiE,KAAYC,KAAYC,KAAUI,EAAO7D,aACpEiE,QAAQC,IAAI,OAAOF,GAEnB,MAAMG,QAAiBC,MAAMJ,GAG7B,OAFA/D,MAAK,QAAqBkE,EAASE,OAE5BpE,MAAK,CAYhB,CAAE,MAAOqE,GACL,MAAM,IAAIjC,MAAMiC,EACpB,CACJ,CAQA,cAAAC,CAAeX,EAAW,IACtB,IACI,OAAIA,EAASxJ,OAAS,EACXkI,EAAuBrC,MAAK,EAAc2D,GAE1C3D,MAAK,CAEpB,CAAE,MAAOqE,GACL,OAAO,IACX,CACJ,CAOA,cAAAE,CAAerD,GACXlB,MAAK,EAAekB,CACxB,CAQA,mBAAAsD,CAAoBb,EAAW,IAC3B,IACI,OAAIA,EAASxJ,OAAS,EACX6F,MAAK,EAAayE,KAAKxE,IAAIyE,GAAOrC,EAAuBqC,EAAKf,IAE9D3D,MAAK,EAAayE,IAEjC,CAAE,MAAOJ,GACL,OAAO,IACX,CACJ,CAOA,mBAAAM,CAAoBC,GAChB5E,MAAK,EAAayE,KAAOG,CAC7B,CAQA,oBAAAC,CAAqBlB,EAAW,IAC5B,IACI,MAAMmB,EAAa9E,MAAK,EAAayE,KAAKM,QAAQL,GAAOA,EAAIM,OAC7D,OAAIrB,EAASxJ,OAAS,EACX2K,EAAW7E,IAAIgF,GAAU5C,EAAuB4C,EAAQtB,IAExDmB,CAEf,CAAE,MAAOT,GACL,OAAO,IACX,CACJ,CAOA,YAAAa,GACI,OAAOlF,MAAK,EAAamF,WAAa,IAC1C,CAOA,YAAAC,CAAaC,GACTrF,MAAK,EAAamF,UAAYE,CAClC,CAOA,WAAAC,GACI,OAAOtF,MAAK,EAAauF,UAAY,IACzC,CAOA,WAAAC,CAAYH,GACRrF,MAAK,EAAauF,SAAWF,CACjC,CAOA,YAAAI,GACI,OAAOzF,MAAK,EAAa0F,WAAa,IAC1C,CAOA,YAAAC,CAAaN,GACTrF,MAAK,EAAa0F,UAAYL,CAClC,CAOA,kBAAAO,GACI,OAAO5F,MAAK,EAAa6F,iBAAmB,IAChD,CAOA,kBAAAC,CAAmBT,GACfrF,MAAK,EAAa6F,gBAAkBR,CACxC,CAOA,UAAAU,GACI,OAAO/F,MAAK,EAAagG,SAAW,IACxC,CAOA,UAAAC,CAAWZ,GACPrF,MAAK,EAAagG,QAAUX,CAChC,CAOA,WAAAa,GACI,OAAOlG,MAAK,EAAamG,UAAY,IACzC,CAOA,WAAAC,CAAYf,GACRrF,MAAK,EAAamG,SAAWd,CACjC,CAOA,WAAAgB,GACI,OAAOrG,MAAK,EAAasG,UAAY,IACzC,CAOA,WAAAC,CAAYlB,GACRrF,MAAK,EAAasG,SAAWjB,CACjC,CAOA,WAAAmB,GACI,OAAOxG,MAAK,EAAayG,UAAY,EACzC,CAOA,WAAAC,CAAYrB,GACRrF,MAAK,EAAayG,SAAWpB,CACjC,CAOA,iBAAAsB,GACI,OAAO3G,MAAK,EAAayE,KAAKxE,IAAIyE,GAAO,IAAIkC,KAAKlC,EAAI1B,UAC1D,CAOA,kBAAA6D,GACI,OAAO7G,MAAK,EAAayE,KAAKM,QAAQL,GAClCA,EAAIM,MAAM/E,IAAI6G,GAAQ,IAAIF,KAAK,GAAGlC,EAAI1B,YAAY8D,EAAK9D,aAE/D,CASA,YAAA+D,CAAaC,EAASrD,EAAW,IAC7B,IACI,IAAIsD,EACJ,GAAuB,iBAAZD,EACPC,EAAUjH,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,OAC3D,IAAuB,iBAAZA,EAGd,MAAM,IAAIE,WAAW,2DAA2DF,KAFhFC,EAAUjH,MAAK,EAAayE,KAAKuC,EAGrC,CAEA,OAAIrD,EAASxJ,OAAS,EACXkI,EAAuB4E,EAAStD,GAEhCsD,CAEf,CAAE,MAAO/E,GAEL,OADA8B,QAAQK,MAAM,qCAAqCnC,KAC5C,IACX,CACJ,CAQA,YAAAiF,CAAaH,EAAS9F,GAClB,IACI,GAAuB,iBAAZ8F,GACP,IAAK,IAAI9M,EAAI,EAAGA,EAAI8F,MAAK,EAAayE,KAAKtK,OAAQD,IAC/C,GAAI8F,MAAK,EAAayE,KAAKvK,GAAG8I,WAAagE,EAAS,CAChDhH,MAAK,EAAayE,KAAKvK,GAAKgH,EAC5B,KACJ,MAED,IAAuB,iBAAZ8F,EAGd,MAAM,IAAIE,WAAW,+DAA+DF,KAFpFhH,MAAK,EAAayE,KAAKuC,GAAW9F,CAGtC,CACJ,CAAE,MAAOgB,GACL,MAAMA,CACV,CACJ,CAQA,YAAAkF,CAAaJ,GACT,IACI,GAAuB,iBAAZA,EACP,OAAOhH,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,IAAUK,MAAQ,KAC1E,GAAuB,iBAAZL,EACd,OAAOhH,MAAK,EAAayE,KAAKuC,IAAUK,MAAQ,KAEhD,MAAM,IAAIH,WAAW,oCAAoCF,0CAEjE,CAAE,MAAO9E,GAEL,OADA8B,QAAQK,MAAM,qCAAqCnC,KAC5C,IACX,CACJ,CAQA,YAAAoF,CAAaN,EAAS3B,GAClB,IACI,GAAuB,iBAAZ2B,EAAsB,CAC7B,IAAItC,EAAM1E,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,GAC1DtC,IAAKA,EAAI2C,KAAOhC,EACxB,KAAO,IAAuB,iBAAZ2B,EAGd,MAAM,IAAIE,WAAW,oCAAoCF,2CAFzDhH,MAAK,EAAayE,KAAKuC,GAASK,KAAOhC,CAG3C,CACJ,CAAE,MAAOnD,GACL,MAAM,IAAIE,MAAM,mCAAmCF,IACvD,CACJ,CAQA,eAAAqF,CAAgBP,GACZ,IACI,GAAuB,iBAAZA,EACP,OAAOhH,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,IAAUQ,SAAW,KAC7E,GAAuB,iBAAZR,EACd,OAAOhH,MAAK,EAAayE,KAAKuC,IAAUQ,SAAW,KAEnD,MAAM,IAAIN,WAAW,4DAA4DF,IAEzF,CAAE,MAAO9E,GAEL,OADA8B,QAAQK,MAAM,6CAA6CnC,KACpD,IACX,CACJ,CAQA,eAAAuF,CAAgBT,EAAS3B,GACrB,IACI,GAAuB,iBAAZ2B,GACP,IAAK,IAAItC,KAAO1E,MAAK,EAAayE,KAC9B,GAAIC,EAAI1B,WAAagE,EAAS,CAC1BtC,EAAI8C,QAAUnC,EACd,KACJ,MAED,IAAuB,iBAAZ2B,EAGd,MAAM,IAAIE,WAAW,gEAAgEF,KAFrFhH,MAAK,EAAayE,KAAKuC,GAASQ,QAAUnC,CAG9C,CACJ,CAAE,MAAOnD,GACL,MAAM,IAAIE,MAAM,2CAA2CF,IAC/D,CACJ,CAQA,eAAAwF,CAAgBV,GACZ,IACI,GAAuB,iBAAZA,EACP,OAAOhH,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,IAAUW,SAAW,KAC7E,GAAuB,iBAAZX,EACd,OAAOhH,MAAK,EAAayE,KAAKuC,IAAUW,SAAW,KAEnD,MAAM,IAAIT,WAAW,4DAA4DF,IAEzF,CAAE,MAAO9E,GAEL,OADA8B,QAAQK,MAAM,6CAA6CnC,KACpD,IACX,CACJ,CAQA,eAAA0F,CAAgBZ,EAAS3B,GACrB,IACI,GAAuB,iBAAZ2B,GACP,IAAK,IAAItC,KAAO1E,MAAK,EAAayE,KAC9B,GAAIC,EAAI1B,WAAagE,EAAS,CAC1BtC,EAAIiD,QAAUtC,EACd,KACJ,MAED,IAAuB,iBAAZ2B,EAGd,MAAM,IAAIE,WAAW,gEAAgEF,KAFrFhH,MAAK,EAAayE,KAAKuC,GAASW,QAAUtC,CAG9C,CACJ,CAAE,MAAOnD,GACL,MAAM,IAAIE,MAAM,2CAA2CF,IAC/D,CACJ,CAQA,iBAAA2F,CAAkBb,GACd,IACI,GAAuB,iBAAZA,EACP,OAAOhH,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,IAAUc,WAAa,KAC/E,GAAuB,iBAAZd,EACd,OAAOhH,MAAK,EAAayE,KAAKuC,IAAUc,WAAa,KAErD,MAAM,IAAIZ,WAAW,8DAA8DF,IAE3F,CAAE,MAAO9E,GAEL,OADA8B,QAAQK,MAAM,kDAAkDnC,KACzD,IACX,CACJ,CAQA,iBAAA6F,CAAkBf,EAAS3B,GACvB,IACI,GAAuB,iBAAZ2B,GACP,IAAK,IAAItC,KAAO1E,MAAK,EAAayE,KAC9B,GAAIC,EAAI1B,WAAagE,EAAS,CAC1BtC,EAAIoD,UAAYzC,EAChB,KACJ,MAED,IAAuB,iBAAZ2B,EAGd,MAAM,IAAIE,WAAW,kEAAkEF,KAFvFhH,MAAK,EAAayE,KAAKuC,GAASc,UAAYzC,CAGhD,CACJ,CAAE,MAAOnD,GACL,MAAM,IAAIE,MAAM,gDAAgDF,IACpE,CACJ,CAQA,oBAAA8F,CAAqBhB,GACjB,IACI,GAAuB,iBAAZA,EACP,OAAOhH,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,IAAUiB,cAAgB,KAClF,GAAuB,iBAAZjB,EACd,OAAOhH,MAAK,EAAayE,KAAKuC,IAAUiB,cAAgB,KAExD,MAAM,IAAIf,WAAW,iEAAiEF,IAE9F,CAAE,MAAO9E,GAEL,OADA8B,QAAQK,MAAM,sDAAsDnC,KAC7D,IACX,CACJ,CAQA,oBAAAgG,CAAqBlB,EAAS3B,GAC1B,IACI,GAAuB,iBAAZ2B,GACP,IAAK,IAAItC,KAAO1E,MAAK,EAAayE,KAC9B,GAAIC,EAAI1B,WAAagE,EAAS,CAC1BtC,EAAIuD,aAAe5C,EACnB,KACJ,MAED,IAAuB,iBAAZ2B,EAGd,MAAM,IAAIE,WAAW,qEAAqEF,KAF1FhH,MAAK,EAAayE,KAAKuC,GAASiB,aAAe5C,CAGnD,CACJ,CAAE,MAAOnD,GACL,MAAM,IAAIE,MAAM,oDAAoDF,IACxE,CACJ,CAQA,oBAAAiG,CAAqBnB,GACjB,IACI,GAAuB,iBAAZA,EACP,OAAOhH,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,IAAUoB,cAAgB,KAClF,GAAuB,iBAAZpB,EACd,OAAOhH,MAAK,EAAayE,KAAKuC,IAAUoB,cAAgB,KAExD,MAAM,IAAIlB,WAAW,iEAAiEF,IAE9F,CAAE,MAAO9E,GAEL,OADA8B,QAAQK,MAAM,sDAAsDnC,KAC7D,IACX,CACJ,CAQA,oBAAAmG,CAAqBrB,EAAS3B,GAC1B,IACI,GAAuB,iBAAZ2B,GACP,IAAK,IAAItC,KAAO1E,MAAK,EAAayE,KAC9B,GAAIC,EAAI1B,WAAagE,EAAS,CAC1BtC,EAAI0D,aAAe/C,EACnB,KACJ,MAED,IAAuB,iBAAZ2B,EAGd,MAAM,IAAIE,WAAW,qEAAqEF,KAF1FhH,MAAK,EAAayE,KAAKuC,GAASoB,aAAe/C,CAGnD,CACJ,CAAE,MAAOnD,GACL,MAAM,IAAIE,MAAM,oDAAoDF,IACxE,CACJ,CAQA,WAAAoG,CAAYtB,GACR,IACI,GAAuB,iBAAZA,EACP,OAAOhH,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,IAAUuB,KAAO,KACzE,GAAuB,iBAAZvB,EACd,OAAOhH,MAAK,EAAayE,KAAKuC,IAAUuB,KAAO,KAE/C,MAAM,IAAIrB,WAAW,wDAAwDF,IAErF,CAAE,MAAO9E,GAEL,OADA8B,QAAQK,MAAM,mCAAmCnC,KAC1C,IACX,CACJ,CAQA,WAAAsG,CAAYxB,EAAS3B,GACjB,IACI,GAAuB,iBAAZ2B,GACP,IAAK,IAAItC,KAAO1E,MAAK,EAAayE,KAC9B,GAAIC,EAAI1B,WAAagE,EAAS,CAC1BtC,EAAI6D,IAAMlD,EACV,KACJ,MAED,IAAuB,iBAAZ2B,EAGd,MAAM,IAAIE,WAAW,4DAA4DF,KAFjFhH,MAAK,EAAayE,KAAKuC,GAASuB,IAAMlD,CAG1C,CACJ,CAAE,MAAOnD,GACL,MAAM,IAAIE,MAAM,iCAAiCF,IACrD,CACJ,CASA,gBAAAuG,CAAiBzB,GACb,IACI,GAAuB,iBAAZA,EACP,OAAOhH,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,IAAU0B,UAAY,KAC9E,GAAuB,iBAAZ1B,EACd,OAAOhH,MAAK,EAAayE,KAAKuC,IAAU0B,UAAY,KAEpD,MAAM,IAAItG,MAAM,6DAA6D4E,IAErF,CAAE,MAAO9E,GAEL,OADA8B,QAAQK,MAAM,kCAAkCnC,KACzC,IACX,CACJ,CAQA,gBAAAyG,CAAiB3B,EAAS3B,GACtB,IACI,GAAuB,iBAAZ2B,GACP,IAAK,IAAItC,KAAO1E,MAAK,EAAayE,KAC9B,GAAIC,EAAI1B,WAAagE,EAAS,CAC1BtC,EAAIgE,SAAWrD,EACf,KACJ,MAED,IAAuB,iBAAZ2B,EAGd,MAAM,IAAI5E,MAAM,iEAAiE4E,KAFjFhH,MAAK,EAAayE,KAAKuC,GAAS0B,SAAWrD,CAG/C,CACJ,CAAE,MAAOnD,GACL,MAAM,IAAIE,MAAM,gCAAgCF,IACpD,CACJ,CAQA,cAAA0G,CAAe5B,GACX,IACI,GAAuB,iBAAZA,EACP,OAAOhH,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,IAAU6B,QAAU,KAC5E,GAAuB,iBAAZ7B,EACd,OAAOhH,MAAK,EAAayE,KAAKuC,IAAU6B,QAAU,KAElD,MAAM,IAAIzG,MAAM,2DAA2D4E,IAEnF,CAAE,MAAO9E,GAEL,OADA8B,QAAQK,MAAM,uCAAuCnC,KAC9C,IACX,CACJ,CAQA,cAAA4G,CAAe9B,EAAS3B,GACpB,IACI,GAAuB,iBAAZ2B,GACP,IAAK,IAAItC,KAAO1E,MAAK,EAAayE,KAC9B,GAAIC,EAAI1B,WAAagE,EAAS,CAC1BtC,EAAImE,OAASxD,EACb,KACJ,MAED,IAAuB,iBAAZ2B,EAGd,MAAM,IAAI5E,MAAM,+DAA+D4E,KAF/EhH,MAAK,EAAayE,KAAKuC,GAAS6B,OAASxD,CAG7C,CACJ,CAAE,MAAOnD,GACL,MAAM,IAAIE,MAAM,qCAAqCF,IACzD,CACJ,CAQA,kBAAA6G,CAAmB/B,GACf,IACI,GAAuB,iBAAZA,EACP,OAAOhH,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,IAAUgC,YAAc,KAChF,GAAuB,iBAAZhC,EACd,OAAOhH,MAAK,EAAayE,KAAKuC,IAAUgC,YAAc,KAEtD,MAAM,IAAI5G,MAAM,+DAA+D4E,IAEvF,CAAE,MAAO9E,GAEL,OADA8B,QAAQK,MAAM,mDAAmDnC,KAC1D,IACX,CACJ,CAQA,kBAAA+G,CAAmBjC,EAAS3B,GACxB,IACI,GAAuB,iBAAZ2B,GACP,IAAK,IAAItC,KAAO1E,MAAK,EAAayE,KAC9B,GAAIC,EAAI1B,WAAagE,EAAS,CAC1BtC,EAAIsE,WAAa3D,EACjB,KACJ,MAED,IAAuB,iBAAZ2B,EAGd,MAAM,IAAI5E,MAAM,mEAAmE4E,KAFnFhH,MAAK,EAAayE,KAAKuC,GAASgC,WAAa3D,CAGjD,CACJ,CAAE,MAAOnD,GACL,MAAM,IAAIE,MAAM,iDAAiDF,IACrE,CACJ,CAQA,mBAAAgH,CAAoBlC,GAChB,IACI,GAAuB,iBAAZA,EACP,OAAOhH,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,IAAUmC,aAAe,KACjF,GAAuB,iBAAZnC,EACd,OAAOhH,MAAK,EAAayE,KAAKuC,IAAUmC,aAAe,KAEvD,MAAM,IAAI/G,MAAM,gEAAgE4E,IAExF,CAAE,MAAO9E,GAEL,OADA8B,QAAQK,MAAM,gDAAgDnC,KACvD,IACX,CACJ,CAQA,mBAAAkH,CAAoBpC,EAAS3B,GACzB,IACI,GAAuB,iBAAZ2B,GACP,IAAK,IAAItC,KAAO1E,MAAK,EAAayE,KAC9B,GAAIC,EAAI1B,WAAagE,EAAS,CAC1BtC,EAAIyE,YAAc9D,EAClB,KACJ,MAED,IAAuB,iBAAZ2B,EAGd,MAAM,IAAI5E,MAAM,oEAAoE4E,KAFpFhH,MAAK,EAAayE,KAAKuC,GAASmC,YAAc9D,CAGlD,CACJ,CAAE,MAAOnD,GACL,MAAM,IAAIE,MAAM,8CAA8CF,IAClE,CACJ,CAQA,kBAAAmH,CAAmBrC,GACf,IACI,GAAuB,iBAAZA,EACP,OAAOhH,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,IAAUsC,YAAc,KAChF,GAAuB,iBAAZtC,EACd,OAAOhH,MAAK,EAAayE,KAAKuC,IAAUsC,YAAc,KAEtD,MAAM,IAAIlH,MAAM,+DAA+D4E,IAEvF,CAAE,MAAO9E,GAEL,OADA8B,QAAQK,MAAM,4CAA4CnC,KACnD,IACX,CACJ,CAQA,kBAAAqH,CAAmBvC,EAAS3B,GACxB,IACI,GAAuB,iBAAZ2B,GACP,IAAK,IAAItC,KAAO1E,MAAK,EAAayE,KAC9B,GAAIC,EAAI1B,WAAagE,EAAS,CAC1BtC,EAAI4E,WAAajE,EACjB,KACJ,MAED,IAAuB,iBAAZ2B,EAGd,MAAM,IAAI5E,MAAM,mEAAmE4E,KAFnFhH,MAAK,EAAayE,KAAKuC,GAASsC,WAAajE,CAGjD,CACJ,CAAE,MAAOnD,GACL,MAAM,IAAIE,MAAM,0CAA0CF,IAC9D,CACJ,CAQA,YAAAsH,CAAaxC,GACT,IACI,GAAuB,iBAAZA,EACP,OAAOhH,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,IAAUyC,MAAQ,KAC1E,GAAuB,iBAAZzC,EACd,OAAOhH,MAAK,EAAayE,KAAKuC,IAAUyC,MAAQ,KAEhD,MAAM,IAAIrH,MAAM,yDAAyD4E,IAEjF,CAAE,MAAO9E,GAEL,OADA8B,QAAQK,MAAM,8BAA8BnC,KACrC,IACX,CACJ,CAQA,YAAAwH,CAAa1C,EAAS3B,GAClB,IACI,GAAuB,iBAAZ2B,GACP,IAAK,IAAItC,KAAO1E,MAAK,EAAayE,KAC9B,GAAIC,EAAI1B,WAAagE,EAAS,CAC1BtC,EAAI+E,KAAOpE,EACX,KACJ,MAED,IAAuB,iBAAZ2B,EAGd,MAAM,IAAI5E,MAAM,6DAA6D4E,KAF7EhH,MAAK,EAAayE,KAAKuC,GAASyC,KAAOpE,CAG3C,CACJ,CAAE,MAAOnD,GACL,MAAM,IAAIE,MAAM,4BAA4BF,IAChD,CACJ,CAQA,iBAAAyH,CAAkB3C,GACd,IACI,GAAuB,iBAAZA,EACP,OAAOhH,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,IAAU4C,WAAa,KAC/E,GAAuB,iBAAZ5C,EACd,OAAOhH,MAAK,EAAayE,KAAKuC,IAAU4C,WAAa,KAErD,MAAM,IAAIxH,MAAM,8DAA8D4E,IAEtF,CAAE,MAAO9E,GAEL,OADA8B,QAAQK,MAAM,oCAAoCnC,KAC3C,IACX,CACJ,CAQA,iBAAA2H,CAAkB7C,EAAS3B,GACvB,IACI,GAAuB,iBAAZ2B,GACP,IAAK,IAAItC,KAAO1E,MAAK,EAAayE,KAC9B,GAAIC,EAAI1B,WAAagE,EAAS,CAC1BtC,EAAIkF,UAAYvE,EAChB,KACJ,MAED,IAAuB,iBAAZ2B,EAGd,MAAM,IAAI5E,MAAM,kEAAkE4E,KAFlFhH,MAAK,EAAayE,KAAKuC,GAAS4C,UAAYvE,CAGhD,CACJ,CAAE,MAAOnD,GACL,MAAM,IAAIE,MAAM,kCAAkCF,IACtD,CACJ,CAQA,gBAAA4H,CAAiB9C,GACb,IACI,GAAuB,iBAAZA,EACP,OAAOhH,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,IAAU+C,UAAY,KAC9E,GAAuB,iBAAZ/C,EACd,OAAOhH,MAAK,EAAayE,KAAKuC,IAAU+C,UAAY,KAEpD,MAAM,IAAI3H,MAAM,6DAA6D4E,IAErF,CAAE,MAAO9E,GAEL,OADA8B,QAAQK,MAAM,mCAAmCnC,KAC1C,IACX,CACJ,CAQA,gBAAA8H,CAAiBhD,EAAS3B,GACtB,IACI,GAAuB,iBAAZ2B,GACP,IAAK,IAAItC,KAAO1E,MAAK,EAAayE,KAC9B,GAAIC,EAAI1B,WAAagE,EAAS,CAC1BtC,EAAIqF,SAAW1E,EACf,KACJ,MAED,IAAuB,iBAAZ2B,EAGd,MAAM,IAAI5E,MAAM,iEAAiE4E,KAFjFhH,MAAK,EAAayE,KAAKuC,GAAS+C,SAAW1E,CAG/C,CACJ,CAAE,MAAOnD,GACL,MAAM,IAAIE,MAAM,iCAAiCF,IACrD,CACJ,CAQA,iBAAA+H,CAAkBjD,GACd,IACI,GAAuB,iBAAZA,EACP,OAAOhH,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,IAAUkD,WAAa,KAC/E,GAAuB,iBAAZlD,EACd,OAAOhH,MAAK,EAAayE,KAAKuC,IAAUkD,WAAa,KAErD,MAAM,IAAI9H,MAAM,8DAA8D4E,IAEtF,CAAE,MAAO9E,GAEL,OADA8B,QAAQK,MAAM,oCAAoCnC,KAC3C,IACX,CACJ,CAQA,iBAAAiI,CAAkBnD,EAAS3B,GACvB,IACI,GAAuB,iBAAZ2B,GACP,IAAK,IAAItC,KAAO1E,MAAK,EAAayE,KAC9B,GAAIC,EAAI1B,WAAagE,EAAS,CAC1BtC,EAAIwF,UAAY7E,EAChB,KACJ,MAED,IAAuB,iBAAZ2B,EAGd,MAAM,IAAI5E,MAAM,kEAAkE4E,KAFlFhH,MAAK,EAAayE,KAAKuC,GAASkD,UAAY7E,CAGhD,CACJ,CAAE,MAAOnD,GACL,MAAM,IAAIE,MAAM,kCAAkCF,IACtD,CACJ,CAQA,eAAAkI,CAAgBpD,GACZ,IACI,GAAuB,iBAAZA,EACP,OAAOhH,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,IAAUqD,SAAW,KAC7E,GAAuB,iBAAZrD,EACd,OAAOhH,MAAK,EAAayE,KAAKuC,IAAUqD,SAAW,KAEnD,MAAM,IAAIjI,MAAM,4DAA4D4E,IAEpF,CAAE,MAAO9E,GAEL,OADA8B,QAAQK,MAAM,wCAAwCnC,KAC/C,IACX,CACJ,CAQA,eAAAoI,CAAgBtD,EAAS3B,GACrB,IACI,GAAuB,iBAAZ2B,GACP,IAAK,IAAItC,KAAO1E,MAAK,EAAayE,KAC9B,GAAIC,EAAI1B,WAAagE,EAAS,CAC1BtC,EAAI2F,QAAUhF,EACd,KACJ,MAED,IAAuB,iBAAZ2B,EAGd,MAAM,IAAI5E,MAAM,gEAAgE4E,KAFhFhH,MAAK,EAAayE,KAAKuC,GAASqD,QAAUhF,CAG9C,CACJ,CAAE,MAAOnD,GACL,MAAM,IAAIE,MAAM,sCAAsCF,IAC1D,CACJ,CAQA,gBAAAqI,CAAiBvD,GACb,IACI,GAAuB,iBAAZA,EACP,OAAOhH,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,IAAUwD,UAAY,KAC9E,GAAuB,iBAAZxD,EACd,OAAOhH,MAAK,EAAayE,KAAKuC,IAAUwD,UAAY,KAEpD,MAAM,IAAIpI,MAAM,6DAA6D4E,IAErF,CAAE,MAAO9E,GAEL,OADA8B,QAAQK,MAAM,kCAAkCnC,KACzC,IACX,CACJ,CAQA,gBAAAuI,CAAiBzD,EAAS3B,GACtB,IACI,GAAuB,iBAAZ2B,GACP,IAAK,IAAItC,KAAO1E,MAAK,EAAayE,KAC9B,GAAIC,EAAI1B,WAAagE,EAAS,CAC1BtC,EAAI8F,SAAWnF,EACf,KACJ,MAED,IAAuB,iBAAZ2B,EAGd,MAAM,IAAI5E,MAAM,iEAAiE4E,KAFjFhH,MAAK,EAAayE,KAAKuC,GAASwD,SAAWnF,CAG/C,CACJ,CAAE,MAAOnD,GACL,MAAM,IAAIE,MAAM,gCAAgCF,IACpD,CACJ,CAQA,kBAAAwI,CAAmB1D,GACf,IACI,GAAuB,iBAAZA,EACP,OAAOhH,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,IAAU2D,YAAc,KAChF,GAAuB,iBAAZ3D,EACd,OAAOhH,MAAK,EAAayE,KAAKuC,IAAU2D,YAAc,KAEtD,MAAM,IAAIvI,MAAM,+DAA+D4E,IAEvF,CAAE,MAAO9E,GAEL,OADA8B,QAAQK,MAAM,qCAAqCnC,KAC5C,IACX,CACJ,CAQA,kBAAA0I,CAAmB5D,EAAS3B,GACxB,IACI,GAAuB,iBAAZ2B,GACP,IAAK,IAAItC,KAAO1E,MAAK,EAAayE,KAC9B,GAAIC,EAAI1B,WAAagE,EAAS,CAC1BtC,EAAIiG,WAAatF,EACjB,KACJ,MAED,IAAuB,iBAAZ2B,EAGd,MAAM,IAAI5E,MAAM,mEAAmE4E,KAFnFhH,MAAK,EAAayE,KAAKuC,GAAS2D,WAAatF,CAGjD,CACJ,CAAE,MAAOnD,GACL,MAAM,IAAIE,MAAM,mCAAmCF,IACvD,CACJ,CAQA,kBAAA2I,CAAmB7D,GACf,IACI,GAAuB,iBAAZA,EACP,OAAOhH,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,IAAU8D,YAAc,KAChF,GAAuB,iBAAZ9D,EACd,OAAOhH,MAAK,EAAayE,KAAKuC,IAAU8D,YAAc,KAEtD,MAAM,IAAI1I,MAAM,+DAA+D4E,IAEvF,CAAE,MAAO9E,GAEL,OADA8B,QAAQK,MAAM,oCAAoCnC,KAC3C,IACX,CACJ,CAQA,kBAAA6I,CAAmB/D,EAAS3B,GACxB,IACI,GAAuB,iBAAZ2B,GACP,IAAK,IAAItC,KAAO1E,MAAK,EAAayE,KAC9B,GAAIC,EAAI1B,WAAagE,EAAS,CAC1BtC,EAAIoG,WAAazF,EACjB,KACJ,MAED,IAAuB,iBAAZ2B,EAGd,MAAM,IAAI5E,MAAM,mEAAmE4E,KAFnFhH,MAAK,EAAayE,KAAKuC,GAAS8D,WAAazF,CAGjD,CACJ,CAAE,MAAOnD,GACL,MAAM,IAAIE,MAAM,kCAAkCF,IACtD,CACJ,CAQA,sBAAA8I,CAAuBhE,GACnB,IACI,GAAuB,iBAAZA,EACP,OAAOhH,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,IAAUiE,gBAAkB,KACpF,GAAuB,iBAAZjE,EACd,OAAOhH,MAAK,EAAayE,KAAKuC,IAAUiE,gBAAkB,KAE1D,MAAM,IAAI7I,MAAM,mEAAmE4E,IAE3F,CAAE,MAAO9E,GAEL,OADA8B,QAAQK,MAAM,yCAAyCnC,KAChD,IACX,CACJ,CAQA,sBAAAgJ,CAAuBlE,EAAS3B,GAC5B,IACI,GAAuB,iBAAZ2B,GACP,IAAK,IAAItC,KAAO1E,MAAK,EAAayE,KAC9B,GAAIC,EAAI1B,WAAagE,EAAS,CAC1BtC,EAAIuG,eAAiB5F,EACrB,KACJ,MAED,IAAuB,iBAAZ2B,EAGd,MAAM,IAAI5E,MAAM,uEAAuE4E,KAFvFhH,MAAK,EAAayE,KAAKuC,GAASiE,eAAiB5F,CAGrD,CACJ,CAAE,MAAOnD,GACL,MAAM,IAAIE,MAAM,uCAAuCF,IAC3D,CACJ,CAQA,mBAAAiJ,CAAoBnE,GAChB,IACI,GAAuB,iBAAZA,EACP,OAAOhH,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,IAAUoE,aAAe,KACjF,GAAuB,iBAAZpE,EACd,OAAOhH,MAAK,EAAayE,KAAKuC,IAAUoE,aAAe,KAEvD,MAAM,IAAIhJ,MAAM,gEAAgE4E,IAExF,CAAE,MAAO9E,GAEL,OADA8B,QAAQK,MAAM,sCAAsCnC,KAC7C,IACX,CACJ,CAQA,mBAAAmJ,CAAoBrE,EAAS3B,GACzB,IACI,GAAuB,iBAAZ2B,GACP,IAAK,IAAItC,KAAO1E,MAAK,EAAayE,KAC9B,GAAIC,EAAI1B,WAAagE,EAAS,CAC1BtC,EAAI0G,YAAc/F,EAClB,KACJ,MAED,IAAuB,iBAAZ2B,EAGd,MAAM,IAAI5E,MAAM,oEAAoE4E,KAFpFhH,MAAK,EAAayE,KAAKuC,GAASoE,YAAc/F,CAGlD,CACJ,CAAE,MAAOnD,GACL,MAAM,IAAIE,MAAM,oCAAoCF,IACxD,CACJ,CAQA,eAAAoJ,CAAgBtE,GACZ,IACI,GAAuB,iBAAZA,EACP,OAAOhH,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,IAAUuE,SAAW,KAC7E,GAAuB,iBAAZvE,EACd,OAAOhH,MAAK,EAAayE,KAAKuC,IAAUuE,SAAW,KAEnD,MAAM,IAAInJ,MAAM,4DAA4D4E,IAEpF,CAAE,MAAO9E,GAEL,OADA8B,QAAQK,MAAM,kCAAkCnC,KACzC,IACX,CACJ,CAQA,eAAAsJ,CAAgBxE,EAAS3B,GACrB,IACI,GAAuB,iBAAZ2B,GACP,IAAK,IAAItC,KAAO1E,MAAK,EAAayE,KAC9B,GAAIC,EAAI1B,WAAagE,EAAS,CAC1BtC,EAAI6G,QAAUlG,EACd,KACJ,MAED,IAAuB,iBAAZ2B,EAGd,MAAM,IAAI5E,MAAM,gEAAgE4E,KAFhFhH,MAAK,EAAayE,KAAKuC,GAASuE,QAAUlG,CAG9C,CACJ,CAAE,MAAOnD,GACL,MAAM,IAAIE,MAAM,gCAAgCF,IACpD,CACJ,CAQA,kBAAAuJ,CAAmBzE,GACf,IACI,GAAuB,iBAAZA,EACP,OAAOhH,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,IAAU0E,YAAc,KAChF,GAAuB,iBAAZ1E,EACd,OAAOhH,MAAK,EAAayE,KAAKuC,IAAU0E,YAAc,KAEtD,MAAM,IAAItJ,MAAM,+DAA+D4E,IAEvF,CAAE,MAAO9E,GAEL,OADA8B,QAAQK,MAAM,qCAAqCnC,KAC5C,IACX,CACJ,CAQA,kBAAAyJ,CAAmB3E,EAAS3B,GACxB,IACI,GAAuB,iBAAZ2B,GACP,IAAK,IAAItC,KAAO1E,MAAK,EAAayE,KAC9B,GAAIC,EAAI1B,WAAagE,EAAS,CAC1BtC,EAAIgH,WAAarG,EACjB,KACJ,MAED,IAAuB,iBAAZ2B,EAGd,MAAM,IAAI5E,MAAM,mEAAmE4E,KAFnFhH,MAAK,EAAayE,KAAKuC,GAAS0E,WAAarG,CAGjD,CACJ,CAAE,MAAOnD,GACL,MAAM,IAAIE,MAAM,mCAAmCF,IACvD,CACJ,CAQA,eAAA0J,CAAgB5E,GACZ,IACI,GAAuB,iBAAZA,EACP,OAAOhH,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,IAAU6E,SAAW,KAC7E,GAAuB,iBAAZ7E,EACd,OAAOhH,MAAK,EAAayE,KAAKuC,IAAU6E,SAAW,KAEnD,MAAM,IAAIzJ,MAAM,4DAA4D4E,IAEpF,CAAE,MAAO9E,GAEL,OADA8B,QAAQK,MAAM,iCAAiCnC,KACxC,IACX,CACJ,CAQA,eAAA4J,CAAgB9E,EAAS3B,GACrB,IACI,GAAuB,iBAAZ2B,GACP,IAAK,IAAItC,KAAO1E,MAAK,EAAayE,KAC9B,GAAIC,EAAI1B,WAAagE,EAAS,CAC1BtC,EAAImH,QAAUxG,EACd,KACJ,MAED,IAAuB,iBAAZ2B,EAGd,MAAM,IAAI5E,MAAM,gEAAgE4E,KAFhFhH,MAAK,EAAayE,KAAKuC,GAAS6E,QAAUxG,CAG9C,CACJ,CAAE,MAAOnD,GACL,MAAM,IAAIE,MAAM,+BAA+BF,IACnD,CACJ,CAQA,oBAAA6J,CAAqB/E,GACjB,IACI,GAAuB,iBAAZA,EACP,OAAOhH,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,IAAUgF,cAAgB,KAClF,GAAuB,iBAAZhF,EACd,OAAOhH,MAAK,EAAayE,KAAKuC,IAAUgF,cAAgB,KAExD,MAAM,IAAI5J,MAAM,iEAAiE4E,IAEzF,CAAE,MAAO9E,GAEL,OADA8B,QAAQK,MAAM,uCAAuCnC,KAC9C,IACX,CACJ,CAQA,oBAAA+J,CAAqBjF,EAAS3B,GAC1B,IACI,GAAuB,iBAAZ2B,GACP,IAAK,IAAItC,KAAO1E,MAAK,EAAayE,KAC9B,GAAIC,EAAI1B,WAAagE,EAAS,CAC1BtC,EAAIsH,aAAe3G,EACnB,KACJ,MAED,IAAuB,iBAAZ2B,EAGd,MAAM,IAAI5E,MAAM,qEAAqE4E,KAFrFhH,MAAK,EAAayE,KAAKuC,GAASgF,aAAe3G,CAGnD,CACJ,CAAE,MAAOnD,GACL,MAAM,IAAIE,MAAM,qCAAqCF,IACzD,CACJ,CAQA,cAAAgK,CAAelF,GACX,IACI,GAAuB,iBAAZA,EACP,OAAOhH,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,IAAUmF,QAAU,KAC5E,GAAuB,iBAAZnF,EACd,OAAOhH,MAAK,EAAayE,KAAKuC,IAAUmF,QAAU,KAElD,MAAM,IAAI/J,MAAM,2DAA2D4E,IAEnF,CAAE,MAAO9E,GAEL,OADA8B,QAAQK,MAAM,gCAAgCnC,KACvC,IACX,CACJ,CAQA,cAAAkK,CAAepF,EAAS3B,GACpB,IACI,GAAuB,iBAAZ2B,GACP,IAAK,IAAItC,KAAO1E,MAAK,EAAayE,KAC9B,GAAIC,EAAI1B,WAAagE,EAAS,CAC1BtC,EAAIyH,OAAS9G,EACb,KACJ,MAED,IAAuB,iBAAZ2B,EAGd,MAAM,IAAI5E,MAAM,+DAA+D4E,KAF/EhH,MAAK,EAAayE,KAAKuC,GAASmF,OAAS9G,CAG7C,CACJ,CAAE,MAAOnD,GACL,MAAM,IAAIE,MAAM,8BAA8BF,IAClD,CACJ,CAQA,mBAAAmK,CAAoBrF,GAChB,IACI,GAAuB,iBAAZA,EACP,OAAOhH,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,IAAUsF,aAAe,KACjF,GAAuB,iBAAZtF,EACd,OAAOhH,MAAK,EAAayE,KAAKuC,IAAUsF,aAAe,KAEvD,MAAM,IAAIlK,MAAM,gEAAgE4E,IAExF,CAAE,MAAO9E,GAEL,OADA8B,QAAQK,MAAM,sCAAsCnC,KAC7C,IACX,CACJ,CAQA,mBAAAqK,CAAoBvF,EAAS3B,GACzB,IACI,GAAuB,iBAAZ2B,GACP,IAAK,IAAItC,KAAO1E,MAAK,EAAayE,KAC9B,GAAIC,EAAI1B,WAAagE,EAAS,CAC1BtC,EAAI4H,YAAcjH,EAClB,KACJ,MAED,IAAuB,iBAAZ2B,EAGd,MAAM,IAAI5E,MAAM,oEAAoE4E,KAFpFhH,MAAK,EAAayE,KAAKuC,GAASsF,YAAcjH,CAGlD,CACJ,CAAE,MAAOnD,GACL,MAAM,IAAIE,MAAM,oCAAoCF,IACxD,CACJ,CAQA,iBAAAsK,CAAkBxF,GACd,IACI,GAAuB,iBAAZA,EACP,OAAOhH,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,IAAUyF,WAAa,KAC/E,GAAuB,iBAAZzF,EACd,OAAOhH,MAAK,EAAayE,KAAKuC,IAAUyF,WAAa,KAErD,MAAM,IAAIrK,MAAM,8DAA8D4E,IAEtF,CAAE,MAAO9E,GAEL,OADA8B,QAAQK,MAAM,oCAAoCnC,KAC3C,IACX,CACJ,CAQA,iBAAAwK,CAAkB1F,EAAS3B,GACvB,IACI,GAAuB,iBAAZ2B,GACP,IAAK,IAAItC,KAAO1E,MAAK,EAAayE,KAC9B,GAAIC,EAAI1B,WAAagE,EAAS,CAC1BtC,EAAI+H,UAAYpH,EAChB,KACJ,MAED,IAAuB,iBAAZ2B,EAGd,MAAM,IAAI5E,MAAM,kEAAkE4E,KAFlFhH,MAAK,EAAayE,KAAKuC,GAASyF,UAAYpH,CAGhD,CACJ,CAAE,MAAOnD,GACL,MAAM,IAAIE,MAAM,kCAAkCF,IACtD,CACJ,CAQA,kBAAAyK,CAAmB3F,GACf,IACI,GAAuB,iBAAZA,EACP,OAAOhH,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,IAAU4F,YAAc,KAChF,GAAuB,iBAAZ5F,EACd,OAAOhH,MAAK,EAAayE,KAAKuC,IAAU4F,YAAc,KAEtD,MAAM,IAAIxK,MAAM,+DAA+D4E,IAEvF,CAAE,MAAO9E,GAEL,OADA8B,QAAQK,MAAM,oCAAoCnC,KAC3C,IACX,CACJ,CAQA,kBAAA2K,CAAmB7F,EAAS3B,GACxB,IACI,GAAuB,iBAAZ2B,GACP,IAAK,IAAItC,KAAO1E,MAAK,EAAayE,KAC9B,GAAIC,EAAI1B,WAAagE,EAAS,CAC1BtC,EAAIkI,WAAavH,EACjB,KACJ,MAED,IAAuB,iBAAZ2B,EAGd,MAAM,IAAI5E,MAAM,mEAAmE4E,KAFnFhH,MAAK,EAAayE,KAAKuC,GAAS4F,WAAavH,CAGjD,CACJ,CAAE,MAAOnD,GACL,MAAM,IAAIE,MAAM,kCAAkCF,IACtD,CACJ,CAQA,mBAAA4K,CAAoB9F,GAChB,IACI,GAAuB,iBAAZA,EACP,OAAOhH,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,IAAU+F,aAAe,KACjF,GAAuB,iBAAZ/F,EACd,OAAOhH,MAAK,EAAayE,KAAKuC,IAAU+F,aAAe,KAEvD,MAAM,IAAI3K,MAAM,gEAAgE4E,IAExF,CAAE,MAAO9E,GAEL,OADA8B,QAAQK,MAAM,qCAAqCnC,KAC5C,IACX,CACJ,CAQA,mBAAA8K,CAAoBhG,EAAS3B,GACzB,IACI,GAAuB,iBAAZ2B,GACP,IAAK,IAAItC,KAAO1E,MAAK,EAAayE,KAC9B,GAAIC,EAAI1B,WAAagE,EAAS,CAC1BtC,EAAIqI,YAAc1H,EAClB,KACJ,MAED,IAAuB,iBAAZ2B,EAGd,MAAM,IAAI5E,MAAM,oEAAoE4E,KAFpFhH,MAAK,EAAayE,KAAKuC,GAAS+F,YAAc1H,CAGlD,CACJ,CAAE,MAAOnD,GACL,MAAM,IAAIE,MAAM,mCAAmCF,IACvD,CACJ,CAQA,YAAA+K,CAAajG,GACT,IACI,GAAuB,iBAAZA,EACP,OAAOhH,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,IAAUkG,MAAQ,KAC1E,GAAuB,iBAAZlG,EACd,OAAOhH,MAAK,EAAayE,KAAKuC,IAAUkG,MAAQ,KAEhD,MAAM,IAAI9K,MAAM,yDAAyD4E,IAEjF,CAAE,MAAO9E,GAEL,OADA8B,QAAQK,MAAM,8BAA8BnC,KACrC,IACX,CACJ,CAQA,YAAAiL,CAAanG,EAAS3B,GAClB,IACI,GAAuB,iBAAZ2B,GACP,IAAK,IAAItC,KAAO1E,MAAK,EAAayE,KAC9B,GAAIC,EAAI1B,WAAagE,EAAS,CAC1BtC,EAAIwI,KAAO7H,EACX,KACJ,MAED,IAAuB,iBAAZ2B,EAGd,MAAM,IAAI5E,MAAM,6DAA6D4E,KAF7EhH,MAAK,EAAayE,KAAKuC,GAASkG,KAAO7H,CAG3C,CACJ,CAAE,MAAOnD,GACL,MAAM,IAAIE,MAAM,4BAA4BF,IAChD,CACJ,CAQA,gBAAAkL,CAAiBpG,GACb,IACI,GAAuB,iBAAZA,EACP,OAAOhH,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,IAAUP,UAAY,KAC9E,GAAuB,iBAAZO,EACd,OAAOhH,MAAK,EAAayE,KAAKuC,IAAUP,UAAY,KAEpD,MAAM,IAAIrE,MAAM,6DAA6D4E,IAErF,CAAE,MAAO9E,GAEL,OADA8B,QAAQK,MAAM,kCAAkCnC,KACzC,IACX,CACJ,CAQA,gBAAAmL,CAAiBrG,EAAS3B,GACtB,IACI,GAAuB,iBAAZ2B,GACP,IAAK,IAAItC,KAAO1E,MAAK,EAAayE,KAC9B,GAAIC,EAAI1B,WAAagE,EAAS,CAC1BtC,EAAI+B,SAAWpB,EACf,KACJ,MAED,IAAuB,iBAAZ2B,EAGd,MAAM,IAAI5E,MAAM,iEAAiE4E,KAFjFhH,MAAK,EAAayE,KAAKuC,GAASP,SAAWpB,CAG/C,CACJ,CAAE,MAAOnD,GACL,MAAM,IAAIE,MAAM,gCAAgCF,IACpD,CACJ,CAUA,kBAAAoL,CAAmBtG,EAASrD,EAAW,IACnC,IACI,IAAImB,EACJ,GAAuB,iBAAZkC,EACPlC,EAAa9E,MAAK,EAAayE,KAAK1B,KAAK2B,GAAOA,EAAI1B,WAAagE,IAAUhC,OAAS,OACjF,IAAuB,iBAAZgC,EAGd,MAAM,IAAI5E,MAAM,+DAA+D4E,KAF/ElC,EAAa9E,MAAK,EAAayE,KAAKuC,IAAUhC,OAAS,EAG3D,CAEA,OAAIrB,EAASxJ,OAAS,EACX2K,EAAW7E,IAAI6G,IAClB,MAAMyG,EAAW,CAAC,EAIlB,OAHA5J,EAAS6J,QAAQC,IACbF,EAASE,GAAM3G,EAAK2G,KAEjBF,IAGRzI,CACX,CAAE,MAAO5C,GACL,MAAM,IAAIE,MAAM,iCAAiCF,IACrD,CACJ,CAQA,kBAAAwL,CAAmB1G,EAAS9F,GACxB,IACI,GAAuB,iBAAZ8F,GACP,IAAK,IAAItC,KAAO1E,MAAK,EAAayE,KAC9B,GAAIC,EAAI1B,WAAagE,EAAS,CAC1BtC,EAAIM,MAAQ9D,EACZ,KACJ,MAED,IAAuB,iBAAZ8F,EAGd,MAAM,IAAI5E,MAAM,mEAAmE4E,KAFnFhH,MAAK,EAAayE,KAAKuC,GAAShC,MAAQ9D,CAG5C,CACJ,CAAE,MAAOgB,GACL,MAAM,IAAIE,MAAM,8BAA8BF,IAClD,CACJ,CAYA,iBAAAyL,CAAkB3G,EAAS4G,EAAUjK,EAAW,IAC5C,IACI,MAAMkK,EAAUrL,EAAQI,wBAAwB5C,MAAK,EAAayE,KAAMuC,GAClE9F,EAAOsB,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAC5D,OAAIjK,EAASxJ,OACFkI,EAAuBnB,EAAMyC,GAE7BzC,CAEf,CAAE,MAAOgB,GACL,MAAMA,CACV,CACJ,CAUA,iBAAA4L,CAAkB9G,EAAS4G,EAAU1M,GACjC,IACI,MAAM2M,EAAUrL,EAAQI,wBAAwB5C,MAAK,EAAayE,KAAMuC,GACxExE,EAAQS,qBAAqB4K,EAAQ7I,MAAO4I,EAAU1M,EAC1D,CAAE,MAAOgB,GACL,MAAMA,CACV,CACJ,CAUA,oBAAA6L,CAAqB/G,EAAS4G,EAAU1M,GACpC,IACI,MAAM2M,EAAUrL,EAAQI,wBAAwB5C,MAAK,EAAayE,KAAMuC,GACxExE,EAAQY,wBAAwByK,EAAQ7I,MAAO4I,EAAU1M,EAC7D,CAAE,MAAOgB,GACL,MAAMA,CACV,CACJ,CAUA,0BAAA8L,CAA2BhH,EAAS4G,GAChC,IACI,MAAMC,EAAUrL,EAAQI,wBAAwB5C,MAAK,EAAayE,KAAMuC,GACxE,OAAOxE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAUK,aACpE,CAAE,MAAO/L,GACL8B,QAAQK,MAAM,0BAA0BnC,EAAEgM,WAAWhM,EAAEiM,UAC3D,CACJ,CAUA,0BAAAC,CAA2BpH,EAAS4G,EAAUvI,GAC1C,IACI,MAAMwI,EAAUrL,EAAQI,wBAAwB5C,MAAK,EAAayE,KAAMuC,GACxExE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAUK,cAAgB5I,CAC7E,CAAE,MAAOnD,GACL,MAAMA,CACV,CACJ,CAUA,iBAAAmM,CAAkBrH,EAAS4G,GACvB,IACI,MAAMC,EAAUrL,EAAQI,wBAAwB5C,MAAK,EAAayE,KAAMuC,GACxE,OAAOxE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAUvG,IACpE,CAAE,MAAOnF,GACL8B,QAAQK,MAAM,0BAA0BnC,EAAEgM,WAAWhM,EAAEiM,UAC3D,CACJ,CAUA,iBAAAG,CAAkBtH,EAAS4G,EAAUvI,GACjC,IACI,MAAMwI,EAAUrL,EAAQI,wBAAwB5C,MAAK,EAAayE,KAAMuC,GACxExE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAUvG,KAAOhC,CACpE,CAAE,MAAOnD,GACL,MAAMA,CACV,CACJ,CAUA,sBAAAqM,CAAuBvH,EAAS4G,GAC5B,IACI,MAAMC,EAAUrL,EAAQI,wBAAwB5C,MAAK,EAAayE,KAAMuC,GACxE,OAAOxE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAU9F,SACpE,CAAE,MAAO5F,GACL8B,QAAQK,MAAM,0BAA0BnC,EAAEgM,WAAWhM,EAAEiM,UAC3D,CACJ,CAUA,sBAAAK,CAAuBxH,EAAS4G,EAAUvI,GACtC,IACI,MAAMwI,EAAUrL,EAAQI,wBAAwB5C,MAAK,EAAayE,KAAMuC,GACxExE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAU9F,UAAYzC,CACzE,CAAE,MAAOnD,GACL,MAAMA,CACV,CACJ,CAUA,qBAAAuM,CAAsBzH,EAAS4G,GAC3B,IACI,MAAMC,EAAUrL,EAAQI,wBAAwB5C,MAAK,EAAayE,KAAMuC,GACxE,OAAOxE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAUlF,QACpE,CAAE,MAAOxG,GACL8B,QAAQK,MAAM,0BAA0BnC,EAAEgM,WAAWhM,EAAEiM,UAC3D,CACJ,CAUA,qBAAAO,CAAsB1H,EAAS4G,EAAUvI,GACrC,IACI,MAAMwI,EAAUrL,EAAQI,wBAAwB5C,MAAK,EAAayE,KAAMuC,GACxExE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAUlF,SAAWrD,CACxE,CAAE,MAAOnD,GACL,MAAMA,CACV,CACJ,CAUA,gBAAAyM,CAAiB3H,EAAS4G,GACtB,IACI,MAAMC,EAAUrL,EAAQI,wBAAwB5C,MAAK,EAAayE,KAAMuC,GACxE,OAAOxE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAUrF,GACpE,CAAE,MAAOrG,GACL8B,QAAQK,MAAM,0BAA0BnC,EAAEgM,WAAWhM,EAAEiM,UAC3D,CACJ,CAUA,gBAAAS,CAAiB5H,EAAS4G,EAAUvI,GAChC,IACI,MAAMwI,EAAUrL,EAAQI,wBAAwB5C,MAAK,EAAayE,KAAMuC,GACxExE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAUrF,IAAMlD,CACnE,CAAE,MAAOnD,GACL,MAAMA,CACV,CACJ,CAUA,mBAAA2M,CAAoB7H,EAAS4G,GACzB,IACI,MAAMC,EAAUrL,EAAQI,wBAAwB5C,MAAK,EAAayE,KAAMuC,GACxE,OAAOxE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAU/E,MACpE,CAAE,MAAO3G,GACL8B,QAAQK,MAAM,0BAA0BnC,EAAEgM,WAAWhM,EAAEiM,UAC3D,CACJ,CAUA,mBAAAW,CAAoB9H,EAAS4G,EAAUvI,GACnC,IACI,MAAMwI,EAAUrL,EAAQI,wBAAwB5C,MAAK,EAAayE,KAAMuC,GACxExE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAU/E,OAASxD,CACtE,CAAE,MAAOnD,GACL,MAAMA,CACV,CACJ,CAUA,uBAAA6M,CAAwB/H,EAAS4G,GAC7B,IACI,MAAMC,EAAUrL,EAAQI,wBAAwB5C,MAAK,EAAayE,KAAMuC,GACxE,OAAOxE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAU5E,UACpE,CAAE,MAAO9G,GACL8B,QAAQK,MAAM,0BAA0BnC,EAAEgM,WAAWhM,EAAEiM,UAC3D,CACJ,CAUA,uBAAAa,CAAwBhI,EAAS4G,EAAUvI,GACvC,IACI,MAAMwI,EAAUrL,EAAQI,wBAAwB5C,MAAK,EAAayE,KAAMuC,GACxExE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAU5E,WAAa3D,CAC1E,CAAE,MAAOnD,GACL,MAAMA,CACV,CACJ,CAUA,iBAAA+M,CAAkBjI,EAAS4G,GACvB,IACI,MAAMC,EAAUrL,EAAQI,wBAAwB5C,MAAK,EAAayE,KAAMuC,GACxE,OAAOxE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAUnE,IACpE,CAAE,MAAOvH,GACL8B,QAAQK,MAAM,0BAA0BnC,EAAEgM,WAAWhM,EAAEiM,UAC3D,CACJ,CAUA,iBAAAe,CAAkBlI,EAAS4G,EAAUvI,GACjC,IACI,MAAMwI,EAAUrL,EAAQI,wBAAwB5C,MAAK,EAAayE,KAAMuC,GACxExE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAUnE,KAAOpE,CACpE,CAAE,MAAOnD,GACL,MAAMA,CACV,CACJ,CAUA,sBAAAiN,CAAuBnI,EAAS4G,GAC5B,IACI,MAAMC,EAAUrL,EAAQI,wBAAwB5C,MAAK,EAAayE,KAAMuC,GACxE,OAAOxE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAUhE,SACpE,CAAE,MAAO1H,GACL8B,QAAQK,MAAM,0BAA0BnC,EAAEgM,WAAWhM,EAAEiM,UAC3D,CACJ,CAWA,sBAAAiB,CAAuBpI,EAAS4G,EAAUvI,GACtC,IACI,MAAMwI,EAAUrL,EAAQI,wBAAwB5C,MAAK,EAAayE,KAAMuC,GACxExE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAUhE,UAAYvE,CACzE,CAAE,MAAOnD,GACL,MAAMA,CACV,CACJ,CASA,uBAAAmN,CAAwBrI,EAAS4G,GAC7B,IACI,IAAIC,EAAUrL,EAAQI,wBAAwB5C,KAAKsP,YAAY7K,KAAMuC,GACrE,OAAOxE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAUtE,UACpE,CAAE,MAAOpH,GACL8B,QAAQK,MAAM,0BAA0BnC,EAAEgM,WAAWhM,EAAEiM,UAC3D,CACJ,CASA,uBAAAoB,CAAwBvI,EAAS4G,EAAUvI,GACvC,IACI,IAAIwI,EAAUrL,EAAQI,wBAAwB5C,KAAKsP,YAAY7K,KAAMuC,GACrExE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAUtE,WAAajE,CAC1E,CAAE,MAAOnD,GACL,MAAMA,CACV,CACJ,CASA,qBAAAsN,CAAsBxI,EAAS4G,GAC3B,IACI,IAAIC,EAAUrL,EAAQI,wBAAwB5C,KAAKsP,YAAY7K,KAAMuC,GACrE,OAAOxE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAU7D,QACpE,CAAE,MAAO7H,GACL8B,QAAQK,MAAM,0BAA0BnC,EAAEgM,WAAWhM,EAAEiM,UAC3D,CACJ,CASA,qBAAAsB,CAAsBzI,EAAS4G,EAAUvI,GACrC,IACI,IAAIwI,EAAUrL,EAAQI,wBAAwB5C,KAAKsP,YAAY7K,KAAMuC,GACrExE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAU7D,SAAW1E,CACxE,CAAE,MAAOnD,GACL,MAAMA,CACV,CACJ,CASA,sBAAAwN,CAAuB1I,EAAS4G,GAC5B,IACI,IAAIC,EAAUrL,EAAQI,wBAAwB5C,KAAKsP,YAAY7K,KAAMuC,GACrE,OAAOxE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAU1D,SACpE,CAAE,MAAOhI,GACL8B,QAAQK,MAAM,0BAA0BnC,EAAEgM,WAAWhM,EAAEiM,UAC3D,CACJ,CASA,sBAAAwB,CAAuB3I,EAAS4G,EAAUvI,GACtC,IACI,IAAIwI,EAAUrL,EAAQI,wBAAwB5C,KAAKsP,YAAY7K,KAAMuC,GACrExE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAU1D,UAAY7E,CACzE,CAAE,MAAOnD,GACL,MAAMA,CACV,CACJ,CASA,oBAAA0N,CAAqB5I,EAAS4G,GAC1B,IACI,IAAIC,EAAUrL,EAAQI,wBAAwB5C,KAAKsP,YAAY7K,KAAMuC,GACrE,OAAOxE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAUvD,OACpE,CAAE,MAAOnI,GACL8B,QAAQK,MAAM,0BAA0BnC,EAAEgM,WAAWhM,EAAEiM,UAC3D,CACJ,CASA,oBAAA0B,CAAqB7I,EAAS4G,EAAUvI,GACpC,IACI,IAAIwI,EAAUrL,EAAQI,wBAAwB5C,KAAKsP,YAAY7K,KAAMuC,GACrExE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAUvD,QAAUhF,CACvE,CAAE,MAAOnD,GACL,MAAMA,CACV,CACJ,CASA,qBAAA4N,CAAsB9I,EAAS4G,GAC3B,IACI,IAAIC,EAAUrL,EAAQI,wBAAwB5C,KAAKsP,YAAY7K,KAAMuC,GACrE,OAAOxE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAUpD,QACpE,CAAE,MAAOtI,GACL8B,QAAQK,MAAM,0BAA0BnC,EAAEgM,WAAWhM,EAAEiM,UAC3D,CACJ,CASA,qBAAA4B,CAAsB/I,EAAS4G,EAAUvI,GACrC,IACI,IAAIwI,EAAUrL,EAAQI,wBAAwB5C,KAAKsP,YAAY7K,KAAMuC,GACrExE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAUpD,SAAWnF,CACxE,CAAE,MAAOnD,GACL,MAAMA,CACV,CACJ,CASA,uBAAA8N,CAAwBhJ,EAAS4G,GAC7B,IACI,IAAIC,EAAUrL,EAAQI,wBAAwB5C,KAAKsP,YAAY7K,KAAMuC,GACrE,OAAOxE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAU9C,UACpE,CAAE,MAAO5I,GACL8B,QAAQK,MAAM,0BAA0BnC,EAAEgM,WAAWhM,EAAEiM,UAC3D,CACJ,CASA,uBAAA8B,CAAwBjJ,EAAS4G,EAAUvI,GACvC,IACI,IAAIwI,EAAUrL,EAAQI,wBAAwB5C,KAAKsP,YAAY7K,KAAMuC,GACrExE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAU9C,WAAazF,CAC1E,CAAE,MAAOnD,GACL,MAAMA,CACV,CACJ,CASA,uBAAAgO,CAAwBlJ,EAAS4G,GAC7B,IACI,IAAIC,EAAUrL,EAAQI,wBAAwB5C,KAAKsP,YAAY7K,KAAMuC,GACrE,OAAOxE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAUjD,UACpE,CAAE,MAAOzI,GACL8B,QAAQK,MAAM,0BAA0BnC,EAAEgM,WAAWhM,EAAEiM,UAC3D,CACJ,CASA,uBAAAgC,CAAwBnJ,EAAS4G,EAAUvI,GACvC,IACI,IAAIwI,EAAUrL,EAAQI,wBAAwB5C,KAAKsP,YAAY7K,KAAMuC,GACrExE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAUjD,WAAatF,CAC1E,CAAE,MAAOnD,GACL,MAAMA,CACV,CACJ,CASA,2BAAAkO,CAA4BpJ,EAAS4G,GACjC,IACI,IAAIC,EAAUrL,EAAQI,wBAAwB5C,KAAKsP,YAAY7K,KAAMuC,GACrE,OAAOxE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAU3C,cACpE,CAAE,MAAO/I,GACL8B,QAAQK,MAAM,0BAA0BnC,EAAEgM,WAAWhM,EAAEiM,UAC3D,CACJ,CASA,2BAAAkC,CAA4BrJ,EAAS4G,EAAUvI,GAC3C,IACI,IAAIwI,EAAUrL,EAAQI,wBAAwB5C,KAAKsP,YAAY7K,KAAMuC,GACrExE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAU3C,eAAiB5F,CAC9E,CAAE,MAAOnD,GACL,MAAMA,CACV,CACJ,CASA,wBAAAoO,CAAyBtJ,EAAS4G,GAC9B,IACI,IAAIC,EAAUrL,EAAQI,wBAAwB5C,KAAKsP,YAAY7K,KAAMuC,GACrE,OAAOxE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAUxC,WACpE,CAAE,MAAOlJ,GACL8B,QAAQK,MAAM,0BAA0BnC,EAAEgM,WAAWhM,EAAEiM,UAC3D,CACJ,CASA,wBAAAoC,CAAyBvJ,EAAS4G,EAAUvI,GACxC,IACI,IAAIwI,EAAUrL,EAAQI,wBAAwB5C,KAAKsP,YAAY7K,KAAMuC,GACrExE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAUxC,YAAc/F,CAC3E,CAAE,MAAOnD,GACL,MAAMA,CACV,CACJ,CASA,oBAAAsO,CAAqBxJ,EAAS4G,GAC1B,IACI,IAAIC,EAAUrL,EAAQI,wBAAwB5C,KAAKsP,YAAY7K,KAAMuC,GACrE,OAAOxE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAUrC,OACpE,CAAE,MAAOrJ,GACL8B,QAAQK,MAAM,0BAA0BnC,EAAEgM,WAAWhM,EAAEiM,UAC3D,CACJ,CASA,oBAAAsC,CAAqBzJ,EAAS4G,EAAUvI,GACpC,IACI,IAAIwI,EAAUrL,EAAQI,wBAAwB5C,KAAKsP,YAAY7K,KAAMuC,GACrExE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAUrC,QAAUlG,CACvE,CAAE,MAAOnD,GACL,MAAMA,CACV,CACJ,CASA,uBAAAwO,CAAwB1J,EAAS4G,GAC7B,IACI,IAAIC,EAAUrL,EAAQI,wBAAwB5C,KAAKsP,YAAY7K,KAAMuC,GACrE,OAAOxE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAUlC,UACpE,CAAE,MAAOxJ,GACL8B,QAAQK,MAAM,0BAA0BnC,EAAEgM,WAAWhM,EAAEiM,UAC3D,CACJ,CASA,uBAAAwC,CAAwB3J,EAAS4G,EAAUvI,GACvC,IACI,IAAIwI,EAAUrL,EAAQI,wBAAwB5C,KAAKsP,YAAY7K,KAAMuC,GACrExE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAUlC,WAAarG,CAC1E,CAAE,MAAOnD,GACL,MAAMA,CACV,CACJ,CASA,uBAAA0O,CAAwB5J,EAAS4G,GAC7B,IACI,IAAIC,EAAUrL,EAAQI,wBAAwB5C,KAAKsP,YAAY7K,KAAMuC,GACrE,OAAOxE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAUhB,UACpE,CAAE,MAAO1K,GACL8B,QAAQK,MAAM,0BAA0BnC,EAAEgM,WAAWhM,EAAEiM,UAC3D,CACJ,CASA,uBAAA0C,CAAwB7J,EAAS4G,EAAUvI,GACvC,IACI,IAAIwI,EAAUrL,EAAQI,wBAAwB5C,KAAKsP,YAAY7K,KAAMuC,GACrExE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAUhB,WAAavH,CAC1E,CAAE,MAAOnD,GACL,MAAMA,CACV,CACJ,CASA,iBAAA4O,CAAkB9J,EAAS4G,GACvB,IACI,IAAIC,EAAUrL,EAAQI,wBAAwB5C,KAAKsP,YAAY7K,KAAMuC,GACrE,OAAOxE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAUV,IACpE,CAAE,MAAOhL,GACL8B,QAAQK,MAAM,0BAA0BnC,EAAEgM,WAAWhM,EAAEiM,UAC3D,CACJ,CASA,iBAAA4C,CAAkB/J,EAAS4G,EAAUvI,GACjC,IACI,IAAIwI,EAAUrL,EAAQI,wBAAwB5C,KAAKsP,YAAY7K,KAAMuC,GACrExE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAUV,KAAO7H,CACpE,CAAE,MAAOnD,GACL,MAAMA,CACV,CACJ,CASA,qBAAA8O,CAAsBhK,EAAS4G,GAC3B,IACI,IAAIC,EAAUrL,EAAQI,wBAAwB5C,KAAKsP,YAAY7K,KAAMuC,GACrE,OAAOxE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAUnH,QACpE,CAAE,MAAOvE,GACL8B,QAAQK,MAAM,0BAA0BnC,EAAEgM,WAAWhM,EAAEiM,UAC3D,CACJ,CASA,qBAAA8C,CAAsBjK,EAAS4G,EAAUvI,GACrC,IACI,IAAIwI,EAAUrL,EAAQI,wBAAwB5C,KAAKsP,YAAY7K,KAAMuC,GACrExE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAUnH,SAAWpB,CACxE,CAAE,MAAOnD,GACL,MAAMA,CACV,CACJ,CAWA,mBAAAgP,CAAoBlK,EAAS4G,GACzB,IACI,IAAIC,EAAUrL,EAAQI,wBAAwB5C,KAAKsP,YAAY7K,KAAMuC,GACrE,OAAOxE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAUuD,MACpE,CAAE,MAAOjP,GACL8B,QAAQK,MAAM,0BAA0BnC,EAAEgM,WAAWhM,EAAEiM,UAC3D,CACJ,CASA,mBAAAiD,CAAoBpK,EAAS4G,EAAUvI,GACnC,IACI,IAAIwI,EAAUrL,EAAQI,wBAAwB5C,KAAKsP,YAAY7K,KAAMuC,GACrExE,EAAQI,wBAAwBiL,EAAQ7I,MAAO4I,GAAUuD,OAAS9L,CACtE,CAAE,MAAOnD,GACL,MAAMA,CACV,CACJ,CAKA,gBAAAmP,GACIrR,MAAK,EAAe,CAAC,CACzB,EAGJvG,EAAOC,QAAU,CACb8I,UACAF,eACAC,gBACAF,yB,oJC5yFA/H,EAAU,CAAC,EAEfA,EAAQgX,kBAAoB,IAC5BhX,EAAQgH,cAAgB,IACxBhH,EAAQkH,OAAS,SAAc,KAAM,QACrClH,EAAQsB,OAAS,IACjBtB,EAAQiX,mBAAqB,IAEhB,IAAI,IAASjX,GAKJ,KAAW,IAAQkX,QAAS,IAAQA,OAAnD,MCrBD,QAAEhP,GAAY,EAAQ,MAE5B,WAGA,MACMiP,EAAS9U,SAASkF,cAAc,iBAChC6P,EAAgB/U,SAASkF,cAAc,mBACvC8P,GAAS,IAAI/K,MAAOgL,mBAAmB,QAAS,CAClDC,KAAM,UACNC,MAAO,OACPpN,IAAK,YAEHqN,EAAkBpV,SAASqV,eAAe,oBAC1CC,EAActV,SAASqV,eAAe,QACtCE,EAAcvV,SAASqV,eAAe,gBAE5C,IAAI1O,EAAW,eACf,MAAM6O,EAAQ,IAAIvL,KACZwL,EAAW,IAAIxL,KAAKuL,GAC1BC,EAASC,QAAQF,EAAMG,UAAU,GAEjC,MAAMC,EAAWC,EAAcL,GACzBM,EAAcD,EAAcJ,GAIlCM,eAAeC,EAAYrP,GACvB,IACQ,MAAMsP,EAAU,IAAIpQ,EAxBjB,mCA0BGoQ,EAAQvP,iBACcC,EACAiP,EACAE,EACA,GACA,SAiCxC,SAA4BG,EAASlB,GACjCK,EAAgBc,YAAc,sBAAwBnB,EAEtDO,EAAYY,YAAclB,EAE1B,MAAMmB,EAAgBF,EAAQ7L,aAAawL,EACvC,CAAC,OAAQ,OAAQ,YAAa,cAAe,aAAa,UAAW,YAInE1M,EAAkB+M,EAAQhN,qBACPjJ,SAASqV,eAAe,qBAE5Ba,YADlBhN,EACgC,IAAMA,EAAkB,IAExB,GAInCqM,EAAYW,YAAcC,EAAoB,KAAE,IAE7BnW,SAASkF,cAAc,6BAC/BgB,IAAM,KAAMiQ,EAAoB,KAAI,OAE7BnW,SAASqV,eAAe,cAChCa,YAAc,cAAgBC,EAAyB,UAAzC,KAELnW,SAASqV,eAAe,cAChCa,YAAcC,EAA0B,WAEpCnW,SAASqV,eAAe,MAChCa,YAAc,QAASC,EAAuB,QAAhC,KAENnW,SAASqV,eAAe,MAChCa,YAAc,OAASC,EAAuB,QAAhC,KAEHnW,SAASqV,eAAe,cAChCa,YAAcC,EAA2B,WACvD,CAtEYC,CAAmBH,EAAStP,EAChC,CACA,MAAMe,GACFL,QAAQK,MAAMA,GACd2O,EAAa3O,EACjB,CACR,CAgBA,SAAS2O,EAAa7E,GACpB,MAAM8E,EAAetW,SAASkF,cAAc,kBAC5CoR,EAAaC,UAAUC,IAAI,iBAC3BF,EAAaJ,YAAc,GAC3BI,EAAaJ,YAAc1E,CAC7B,CAEA,SAASqE,EAAcY,GACnB,OAAOA,EAAKC,cAAcC,MAAM,KAAK,EACzC,CA3CAX,EAAYrP,GAqBZmO,EAAO8B,iBAAiB,SAAUb,UAC9Bc,EAAMC,iBACe9W,SAASqV,eAAe,iBAChCkB,UAAUnX,OAAO,iBAE9BuH,EAAWoO,EAAcrM,MACtB/B,EACCqP,EAAYrP,GAEZ0P,EAAa,4BAsDrB,CAGAU,E,uBCvDAja,EAAOC,QAjBP,SAAgBY,GACd,GAAwB,oBAAbqC,SACT,MAAO,CACLd,OAAQ,WAAmB,EAC3BE,OAAQ,WAAmB,GAG/B,IAAIpC,EAAeW,EAAQiX,mBAAmBjX,GAC9C,MAAO,CACLuB,OAAQ,SAAgBd,IAjD5B,SAAepB,EAAcW,EAASS,GACpC,IAAIC,EAAM,GACND,EAAII,WACNH,GAAO,cAAcH,OAAOE,EAAII,SAAU,QAExCJ,EAAIE,QACND,GAAO,UAAUH,OAAOE,EAAIE,MAAO,OAErC,IAAIkF,OAAiC,IAAdpF,EAAIK,MACvB+E,IACFnF,GAAO,SAASH,OAAOE,EAAIK,MAAMjB,OAAS,EAAI,IAAIU,OAAOE,EAAIK,OAAS,GAAI,OAE5EJ,GAAOD,EAAIC,IACPmF,IACFnF,GAAO,KAELD,EAAIE,QACND,GAAO,KAELD,EAAII,WACNH,GAAO,KAET,IAAIE,EAAYH,EAAIG,UAChBA,GAA6B,oBAAT0F,OACtB5F,GAAO,uDAAuDH,OAAO+F,KAAKE,SAASC,mBAAmBC,KAAKC,UAAU/F,MAAe,QAKtIZ,EAAQgX,kBAAkBtW,EAAKrB,EAAcW,EAAQA,QACvD,CAoBMqZ,CAAMha,EAAcW,EAASS,EAC/B,EACAgB,OAAQ,YArBZ,SAA4BpC,GAE1B,GAAgC,OAA5BA,EAAaia,WACf,OAAO,EAETja,EAAaia,WAAWnX,YAAY9C,EACtC,CAgBMka,CAAmBla,EACrB,EAEJ,C,gBCjDA,SAAS2I,EAAawR,EAAUC,EAASC,EAAc,IACnD,IAAK,MAAOlQ,EAAKuB,KAAUnC,OAAO+Q,QAAQF,GACjCC,EAAYE,SAASpQ,KACtBgQ,EAAShQ,GAAOuB,EAG5B,CASA,SAAS9C,EAAc4R,EAAUC,GAC7B,MAAwB,iBAAbD,IAA0BE,MAAMC,QAAQH,IAA0B,OAAbA,GACrDjR,OAAOqR,KAAKJ,GAAUK,MAAM1Q,GAAOsQ,EAAYF,SAASpQ,GAGvE,CASA,SAASzB,EAAuBoS,EAAcC,GAC1C,MAAMC,EAAU,CAAC,EAMjB,OALAD,EAASlH,QAAQ1J,IACTA,KAAO2Q,IACPE,EAAQ7Q,GAAO2Q,EAAa3Q,MAG7B6Q,CACX,CAUA,I,YAPOjb,QAAU,CACb4I,eACAC,gBACAF,0BAIA,WAAiB5I,EAAQ,CACzB,MAAMgb,EAAe,CAAEvG,KAAM,QAAS0G,IAAK,GAAItR,SAAU,WAAYuR,MAAO,qBAK5EvS,EAAamS,EAJO,CAAEvG,KAAM,cAAe0G,IAAK,GAAItR,SAAU,cAAeuR,MAAO,2BAC9D,CAAC,UAIvB7Q,QAAQC,IAAIwQ,GAEZ,MAAML,EAAc,CAAC,OAAQ,MAAO,SAG9BU,EAAY,CAAE5G,KAAM,QAAS0G,IAAK,IACxC5Q,QAAQC,IAAI1B,EAAcuS,EAAWV,IAGrC,MAAMW,EAAc,CAAE7G,KAAM,MAAO0G,IAAK,GAAItR,SAAU,QACtDU,QAAQC,IAAI1B,EAAcwS,EAAaX,IAGvC,MAAMY,EAAW,CAAC,OAAQ,SAC1BhR,QAAQC,IAAI1B,EAAcyS,EAAUZ,IAEpC,MASMO,EAAUtS,EATM,CAClB6L,KAAM,WACN0G,IAAK,GACLC,MAAO,sBACPI,QAAS,OAEI,CAAC,OAAQ,UAI1BjR,QAAQC,IAAI0Q,EAChB,C,GC1FIO,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqB7U,IAAjB8U,EACH,OAAOA,EAAa3b,QAGrB,IAAID,EAASyb,EAAyBE,GAAY,CACjD1a,GAAI0a,EACJE,QAAQ,EACR5b,QAAS,CAAC,GAUX,OANA6b,EAAoBH,GAAU3b,EAAQA,EAAOC,QAASyb,GAGtD1b,EAAO6b,QAAS,EAGT7b,EAAOC,OACf,CAGAyb,EAAoBK,EAAIN,EC3BxBC,EAAoBM,EAAKhc,IACxB,IAAIic,EAASjc,GAAUA,EAAOkc,WAC7B,IAAOlc,EAAiB,QACxB,IAAM,EAEP,OADA0b,EAAoBS,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,GCLRP,EAAoBS,EAAI,CAAClc,EAASoc,KACjC,IAAI,IAAIhS,KAAOgS,EACXX,EAAoBY,EAAED,EAAYhS,KAASqR,EAAoBY,EAAErc,EAASoK,IAC5EZ,OAAO8S,eAAetc,EAASoK,EAAK,CAAEmS,YAAY,EAAMC,IAAKJ,EAAWhS,MCJ3EqR,EAAoBY,EAAI,CAAChb,EAAKob,IAAUjT,OAAOkT,UAAUC,eAAeC,KAAKvb,EAAKob,GCAlFhB,EAAoBoB,IAAO9c,IAC1BA,EAAO+c,MAAQ,GACV/c,EAAOgd,WAAUhd,EAAOgd,SAAW,IACjChd,GCHR0b,EAAoBuB,QAAKnW,ECGC4U,EAAoBA,EAAoBwB,EAAI,I","sources":["webpack://odin-weather-app/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js","webpack://odin-weather-app/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack://odin-weather-app/./node_modules/style-loader/dist/runtime/styleTagTransform.js","webpack://odin-weather-app/./src/styles/styles.css","webpack://odin-weather-app/./src/Library/constants.js","webpack://odin-weather-app/./node_modules/css-loader/dist/runtime/api.js","webpack://odin-weather-app/./node_modules/css-loader/dist/runtime/sourceMaps.js","webpack://odin-weather-app/./node_modules/style-loader/dist/runtime/insertStyleElement.js","webpack://odin-weather-app/./node_modules/style-loader/dist/runtime/insertBySelector.js","webpack://odin-weather-app/./src/Library/weather.js","webpack://odin-weather-app/./src/styles/styles.css?e45b","webpack://odin-weather-app/./src/main.js","webpack://odin-weather-app/./node_modules/style-loader/dist/runtime/styleDomAPI.js","webpack://odin-weather-app/./src/Library/utils.js","webpack://odin-weather-app/webpack/bootstrap","webpack://odin-weather-app/webpack/runtime/compat get default export","webpack://odin-weather-app/webpack/runtime/define property getters","webpack://odin-weather-app/webpack/runtime/hasOwnProperty shorthand","webpack://odin-weather-app/webpack/runtime/node module decorator","webpack://odin-weather-app/webpack/runtime/nonce","webpack://odin-weather-app/webpack/startup"],"sourcesContent":["\"use strict\";\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce = typeof __webpack_nonce__ !== \"undefined\" ? __webpack_nonce__ : null;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;","\"use strict\";\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};","\"use strict\";\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `/* styles.css */\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nhtml {\n  font-family: \"Segoe UI\", Tahoma, Geneva, Verdana, sans-serif;\n  color: white;\n  height: 100%;\n}\nbody {\n  display: flex;\n  justify-content: center; \n  align-items: center; \n  flex-direction: column;\n  height: 100vh; \n  margin: 0 auto;\n  background-image: linear-gradient(to bottom, #013a9d, #6d9df6, #f5b111);\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n}\nform {\n  padding-top: 1rem;\n  padding-bottom: 1rem;\n}\ninput {\n  font-size: 1.15rem;\n  width:20ch;\n  padding: .5rem;\n  border-radius: 5px;\n  \n}\nbutton {\n  font-size: 1.1rem;\n  padding: .5rem;\n  border-radius: 5px;\n  border: none;\n  margin-left: .5rem;\n\n}\n\n.app-container {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start; \n  align-items: center; \n  height: 100vh;\n  max-width: 450px;\n  padding: 1rem; \n\n}\n.title-block {\n  display: flex;\n  flex-direction: column;\n  height: 4rem;\n  padding: 1rem;\n  font-weight: 700;\n}\n#resolved-location {\n  font-size: .75rem;\n  font-style: italic;\n}\n\n#currently{\n  margin-top: 2rem;\n  /* max-width: 450px; */\n  width: 90%;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  justify-items: center;\n  align-items: center;\n  background: #6d9df6;\n  border-radius: 20px;\n  padding-bottom: 2rem;\n}\n\n#date {\n  font-size: .75rem;\n  font-weight: 100;\n}\n#current-temp {\n  padding-top: 1rem;\n  font-size: 3rem;\n}\n\n#wx-icon img {\n  padding-top: 1rem;\n  object-fit: contain;\n}\n\n.wx-message {\n  padding: 2rem;\n}\n.error-message {\n  padding: 2rem;\n  display: none;\n}\n.error-display {\n  background: red;\n  display: block;\n}`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/styles/styles.css\"],\"names\":[],\"mappings\":\"AAAA,eAAe;AACf;;;EAGE,sBAAsB;EACtB,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,4DAA4D;EAC5D,YAAY;EACZ,YAAY;AACd;AACA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,sBAAsB;EACtB,aAAa;EACb,cAAc;EACd,uEAAuE;EACvE,4BAA4B;EAC5B,4BAA4B;AAC9B;AACA;EACE,iBAAiB;EACjB,oBAAoB;AACtB;AACA;EACE,kBAAkB;EAClB,UAAU;EACV,cAAc;EACd,kBAAkB;;AAEpB;AACA;EACE,iBAAiB;EACjB,cAAc;EACd,kBAAkB;EAClB,YAAY;EACZ,kBAAkB;;AAEpB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,2BAA2B;EAC3B,mBAAmB;EACnB,aAAa;EACb,gBAAgB;EAChB,aAAa;;AAEf;AACA;EACE,aAAa;EACb,sBAAsB;EACtB,YAAY;EACZ,aAAa;EACb,gBAAgB;AAClB;AACA;EACE,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,gBAAgB;EAChB,sBAAsB;EACtB,UAAU;EACV,aAAa;EACb,8BAA8B;EAC9B,qBAAqB;EACrB,mBAAmB;EACnB,mBAAmB;EACnB,mBAAmB;EACnB,oBAAoB;AACtB;;AAEA;EACE,iBAAiB;EACjB,gBAAgB;AAClB;AACA;EACE,iBAAiB;EACjB,eAAe;AACjB;;AAEA;EACE,iBAAiB;EACjB,mBAAmB;AACrB;;AAEA;EACE,aAAa;AACf;AACA;EACE,aAAa;EACb,aAAa;AACf;AACA;EACE,eAAe;EACf,cAAc;AAChB\",\"sourcesContent\":[\"/* styles.css */\\n*,\\n*::before,\\n*::after {\\n  box-sizing: border-box;\\n  margin: 0;\\n  padding: 0;\\n}\\n\\nhtml {\\n  font-family: \\\"Segoe UI\\\", Tahoma, Geneva, Verdana, sans-serif;\\n  color: white;\\n  height: 100%;\\n}\\nbody {\\n  display: flex;\\n  justify-content: center; \\n  align-items: center; \\n  flex-direction: column;\\n  height: 100vh; \\n  margin: 0 auto;\\n  background-image: linear-gradient(to bottom, #013a9d, #6d9df6, #f5b111);\\n  background-repeat: no-repeat;\\n  background-attachment: fixed;\\n}\\nform {\\n  padding-top: 1rem;\\n  padding-bottom: 1rem;\\n}\\ninput {\\n  font-size: 1.15rem;\\n  width:20ch;\\n  padding: .5rem;\\n  border-radius: 5px;\\n  \\n}\\nbutton {\\n  font-size: 1.1rem;\\n  padding: .5rem;\\n  border-radius: 5px;\\n  border: none;\\n  margin-left: .5rem;\\n\\n}\\n\\n.app-container {\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: flex-start; \\n  align-items: center; \\n  height: 100vh;\\n  max-width: 450px;\\n  padding: 1rem; \\n\\n}\\n.title-block {\\n  display: flex;\\n  flex-direction: column;\\n  height: 4rem;\\n  padding: 1rem;\\n  font-weight: 700;\\n}\\n#resolved-location {\\n  font-size: .75rem;\\n  font-style: italic;\\n}\\n\\n#currently{\\n  margin-top: 2rem;\\n  /* max-width: 450px; */\\n  width: 90%;\\n  display: grid;\\n  grid-template-columns: 1fr 1fr;\\n  justify-items: center;\\n  align-items: center;\\n  background: #6d9df6;\\n  border-radius: 20px;\\n  padding-bottom: 2rem;\\n}\\n\\n#date {\\n  font-size: .75rem;\\n  font-weight: 100;\\n}\\n#current-temp {\\n  padding-top: 1rem;\\n  font-size: 3rem;\\n}\\n\\n#wx-icon img {\\n  padding-top: 1rem;\\n  object-fit: contain;\\n}\\n\\n.wx-message {\\n  padding: 2rem;\\n}\\n.error-message {\\n  padding: 2rem;\\n  display: none;\\n}\\n.error-display {\\n  background: red;\\n  display: block;\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Define base url for the Visual Crossing API\nconst BASE_URL = \"https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline\";\n\n// Define weather data parameter constants\nconst QUERY_COST = 'queryCost';\nconst LATITUDE = 'latitude';\nconst LONGITUDE = 'longitude';\nconst RESOLVED_ADDRESS = 'resolvedAddress';\nconst ADDRESS = 'address';\nconst TIMEZONE = 'timezone';\nconst TZOFFSET = 'tzoffset';\n\nconst DAYS = 'days';\nconst HOURS = 'hours';\n\nconst DATETIME = 'datetime';\nconst DATETIME_EPOCH = 'datetimeEpoch';\nconst TEMPMAX = 'tempmax';\nconst TEMPMIN = 'tempmin';\nconst TEMP = 'temp';\nconst FEELSLIKEMAX = 'feelslikemax';\nconst FEELSLIKEMIN = 'feelslikemin';\nconst FEELSLIKE = 'feelslike';\nconst DEW = 'dew';\nconst HUMIDITY = 'humidity';\nconst PRECIP = 'precip';\nconst PRECIPPROB = 'precipprob';\nconst PRECIPCOVER = 'precipcover';\nconst PRECIPTYPE = 'preciptype';\nconst SNOW = 'snow';\nconst SNOWDEPTH = 'snowdepth';\nconst WINDGUST = 'windgust';\nconst WINDSPEED = 'windspeed';\nconst WINDDIR = 'winddir';\nconst PRESSURE = 'pressure';\nconst CLOUDCOVER = 'cloudcover';\nconst VISIBILITY = 'visibility';\nconst SOLARRADIATION = 'solarradiation';\nconst SOLARENERGY = 'solarenergy';\nconst UVINDEX = 'uvindex';\nconst SEVERERISK = 'severerisk';\nconst SUNRISE = 'sunrise';\nconst SUNRISE_EPOCH = 'sunriseEpoch';\nconst SUNSET = 'sunset';\nconst SUNSET_EPOCH = 'sunsetEpoch';\nconst MOONPHASE = 'moonphase';\nconst CONDITIONS = 'conditions';\nconst DESCRIPTION = 'description';\nconst ICON = 'icon';\nconst STATIONS = 'stations';\nconst SOURCE = 'source';\n\nconst DAYS_KEYS = [\n    DATETIME, DATETIME_EPOCH, TEMPMAX, TEMPMIN, TEMP, FEELSLIKEMAX, FEELSLIKEMIN, FEELSLIKE, DEW, HUMIDITY, PRECIP, PRECIPPROB, PRECIPCOVER, PRECIPTYPE, \n    SNOW, SNOWDEPTH, WINDGUST, WINDSPEED, WINDDIR, PRESSURE, CLOUDCOVER, VISIBILITY, SOLARRADIATION, SOLARENERGY, UVINDEX, SEVERERISK, SUNRISE, \n    SUNRISE_EPOCH, SUNSET, SUNSET_EPOCH, MOONPHASE, CONDITIONS, DESCRIPTION, ICON, STATIONS, SOURCE, HOURS\n];\n\nconst HOURS_KEYS = [\n    DATETIME, DATETIME_EPOCH, TEMP, FEELSLIKE, DEW, HUMIDITY, PRECIP, PRECIPPROB, PRECIPTYPE, SNOW, SNOWDEPTH, WINDGUST, WINDSPEED, WINDDIR, PRESSURE, \n    CLOUDCOVER, VISIBILITY, SOLARRADIATION, SOLARENERGY, UVINDEX, SEVERERISK, CONDITIONS, ICON, STATIONS, SOURCE\n];\n\nmodule.exports = {\n    BASE_URL,\n    QUERY_COST,\n    LATITUDE,\n    LONGITUDE,\n    RESOLVED_ADDRESS,\n    ADDRESS,\n    TIMEZONE,\n    TZOFFSET,\n    DAYS,\n    HOURS,\n    DATETIME,\n    DATETIME_EPOCH,\n    TEMPMAX,\n    TEMPMIN,\n    TEMP,\n    FEELSLIKEMAX,\n    FEELSLIKEMIN,\n    FEELSLIKE,\n    DEW,\n    HUMIDITY,\n    PRECIP,\n    PRECIPPROB,\n    PRECIPCOVER,\n    PRECIPTYPE,\n    SNOW,\n    SNOWDEPTH,\n    WINDGUST,\n    WINDSPEED,\n    WINDDIR,\n    PRESSURE,\n    CLOUDCOVER,\n    VISIBILITY,\n    SOLARRADIATION,\n    SOLARENERGY,\n    UVINDEX,\n    SEVERERISK,\n    SUNRISE,\n    SUNRISE_EPOCH,\n    SUNSET,\n    SUNSET_EPOCH,\n    MOONPHASE,\n    CONDITIONS,\n    DESCRIPTION,\n    ICON,\n    STATIONS,\n    SOURCE,\n    DAYS_KEYS,\n    HOURS_KEYS\n};\n","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};","\"use strict\";\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === \"function\") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    return [content].concat([sourceMapping]).join(\"\\n\");\n  }\n  return [content].join(\"\\n\");\n};","\"use strict\";\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;","\"use strict\";\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;","const { extractSubobjectByKeys, updateObject, isValidObject } = require('./utils');\nconst { BASE_URL } = require('./constants');\n\nclass Weather {\n    /**\n     * A class to fetch and manipulate weather data using the Visual Crossing Weather API.\n     * \n     * @param {string} baseUrl - Base URL of the weather API.\n     * @param {string} apiKey - API key for the weather API.\n     */\n\n    // Private field declaration\n    #weatherData;\n\n    constructor(apiKey = '', baseUrl = BASE_URL) {\n        this.baseUrl = baseUrl;\n        this.apiKey = apiKey;\n        this.#weatherData = {};\n    }\n\n\n    /**\n     * Filters an item by its datetime value from a list of dictionaries, each containing a 'datetime' key.\n     * \n     * @param {Array} src - The source list of dictionaries, each expected to contain a 'datetime' key.\n     * @param {string|number} datetimeVal - The datetime value used for filtering, which can be a date string or an index.\n     * @returns {Object|null} - The filtered dictionary item.\n     */\n    static filterItemByDatetimeVal(src, datetimeVal) {\n        if (typeof datetimeVal === 'string') {\n            return src.find(item => item.datetime === datetimeVal) || null;\n        } else if (typeof datetimeVal === 'number') {\n            return src[datetimeVal] || null;\n        } else {\n            throw new Error(`Invalid input datetime value for filterItemByDatetimeVal with str or int: ${datetimeVal}`);\n        }\n    }\n\n    /**\n     * Sets an item's data by its datetime value in a list of dictionaries based on the given datetimeVal.\n     *\n     * @param {Array} src - The source list of dictionaries, each expected to contain a 'datetime' key.\n     * @param {string|number} datetimeVal - The datetime value used for updating, which can be a date string or an index.\n     * @param {Object} data - The new data dictionary to replace the old dictionary.\n     *\n     * @throws {Error} If the input data is not an object or datetimeVal is neither a string nor a number.\n     */\n    static setItemByDatetimeVal(src, datetimeVal, data) {\n        // Check if the data is an object\n        if (typeof data !== 'object' || data === null) {\n            throw new Error(`Invalid input data value for setItemByDatetimeVal with object: ${data}`);\n        }\n\n        if (typeof datetimeVal === 'string') {\n            // Loop through the source array to find the matching datetime\n            for (const item of src) {\n                if (item.datetime === datetimeVal) {\n                    // Ensure datetime is not changed and update item\n                    Object.assign(item, data, { datetime: datetimeVal });\n                    break;\n                }\n            }\n        } else if (typeof datetimeVal === 'number') {\n            // Ensure datetime is not changed and replace item at the index\n            data.datetime = src[datetimeVal].datetime;\n            src[datetimeVal] = { ...data };\n        } else {\n            throw new Error(`Invalid input datetime value for setItemByDatetimeVal with string or number: ${datetimeVal}`);\n        }\n    }\n\n    /**\n     * Updates an item's data by its datetime value in a list of dictionaries based on the given datetimeVal.\n     *\n     * @param {Array} src - The source list of dictionaries, each expected to contain a 'datetime' key.\n     * @param {string|number} datetimeVal - The datetime value used for updating, which can be a date string or an index.\n     * @param {Object} data - The new data dictionary to update the old dictionary.\n     *\n     * @throws {Error} If the input data is not an object or datetimeVal is neither a string nor a number.\n     */\n    static updateItemByDatetimeVal(src, datetimeVal, data) {\n        // Check if the data is an object\n        if (typeof data !== 'object' || data === null) {\n            throw new Error(`Invalid input data value for updateItemByDatetimeVal with object: ${data}`);\n        }\n\n        if (typeof datetimeVal === 'string') {\n            // Loop through the source array to find the matching datetime\n            for (const item of src) {\n                if (item.datetime === datetimeVal) {\n                    // Ensure datetime is not changed and update item\n                    Object.assign(item, data);\n                    item.datetime = datetimeVal;\n                    break;\n                }\n            }\n        } else if (typeof datetimeVal === 'number') {\n            // Ensure datetime is not changed and update item at the index\n            data.datetime = src[datetimeVal].datetime;\n            Object.assign(src[datetimeVal], data);\n        } else {\n            throw new Error(`Invalid input datetime value for updateItemByDatetimeVal with string or number: ${datetimeVal}`);\n        }\n    }\n\n    /**\n     * Fetch weather data for a specified location and date range.\n     * \n     * @param {string} location - Location for which weather data is requested.\n     * @param {string} fromDate - Start date of the weather data period (in `yyyy-MM-dd` format).\n     * @param {string} toDate - End date of the weather data period (in `yyyy-MM-dd` format).\n     * @param {string} unitGroup - Unit system for the weather data ('us', 'metric', 'uk' or 'base').\n     * @param {string} include - Data types to include (e.g., 'days', 'hours').\n     * @param {string} elements - Specific weather elements to retrieve.\n     * @returns {Promise<object>} - The weather data as a dictionary.\n     */\n    async fetchWeatherData(location, fromDate = '', toDate = '', unitGroup = 'us', include = 'days', elements = '') {\n        try {\n            const params = new URLSearchParams({\n                unitGroup,\n                elements,\n                include,\n                key: this.apiKey\n            });\n            const url = `${BASE_URL}/${location}/${fromDate}/${toDate}?${params.toString()}`;\n            console.log('url=',url);\n\n            const response = await fetch(url);\n            this.#weatherData = await response.json();\n            // console.log(this.#weatherData)\n            return this.#weatherData\n\n            // try {\n            //     const response = await fetch(url);\n            //     if (!response.ok) {\n            //         throw new Error('Network response was not ok');\n            //     }\n            //     this.#weatherData = await response.json();\n            //     console.log(this.#weatherData);\n            // } catch (error) {\n            //     console.error('There has been a problem with your fetch operation:', error);\n            // }\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    /**\n     * Get the stored weather data.\n     * \n     * @param {Array<string>} elements - List of elements to include in the returned data.\n     * @returns {object} - The weather data as a dictionary, filtered by elements if specified.\n     */\n    getWeatherData(elements = []) {\n        try {\n            if (elements.length > 0) {\n                return extractSubobjectByKeys(this.#weatherData, elements);\n            } else {\n                return this.#weatherData;\n            }\n        } catch (error) {\n            return null;\n        }\n    }\n\n    /**\n     * Set the internal weather data.\n     * \n     * @param {object} data - Weather data to store.\n     */\n    setWeatherData(data) {\n        this.#weatherData = data;\n    }\n\n    /**\n     * Get daily weather data, optionally filtered by elements.\n     * \n     * @param {Array<string>} elements - List of elements to include in the returned data.\n     * @returns {Array<object>} - List of daily data dictionaries, filtered by elements if specified.\n     */\n    getWeatherDailyData(elements = []) {\n        try {\n            if (elements.length > 0) {\n                return this.#weatherData.days.map(day => extractSubobjectByKeys(day, elements));\n            } else {\n                return this.#weatherData.days;\n            }\n        } catch (error) {\n            return null;\n        }\n    }\n\n    /**\n     * Set the daily weather data.\n     * \n     * @param {Array<object>} dailyData - List of daily weather data dictionaries.\n     */\n    setWeatherDailyData(dailyData) {\n        this.#weatherData.days = dailyData;\n    }\n\n    /**\n     * Get hourly weather data for all days, optionally filtered by elements.\n     * \n     * @param {Array<string>} elements - List of elements to include in the returned data.\n     * @returns {Array<object>} - List of hourly data dictionaries, filtered by elements if specified.\n     */\n    getWeatherHourlyData(elements = []) {\n        try {\n            const hourlyData = this.#weatherData.days.flatMap(day => day.hours);\n            if (elements.length > 0) {\n                return hourlyData.map(hourDt => extractSubobjectByKeys(hourDt, elements));\n            } else {\n                return hourlyData;\n            }\n        } catch (error) {\n            return null;\n        }\n    }\n\n    /**\n     * Retrieves the cost of the query from the weather data.\n     * \n     * @returns {number|null} - The cost of the query if available, otherwise null.\n     */\n    getQueryCost() {\n        return this.#weatherData.queryCost || null;\n    }\n\n    /**\n     * Sets the cost of the query in the weather data.\n     * \n     * @param {number} value - The new cost to be set for the query.\n     */\n    setQueryCost(value) {\n        this.#weatherData.queryCost = value;\n    }\n\n    /**\n     * Retrieves the latitude from the weather data.\n     * \n     * @returns {number|null} - The latitude if available, otherwise null.\n     */\n    getLatitude() {\n        return this.#weatherData.latitude || null;\n    }\n\n    /**\n     * Sets the latitude in the weather data.\n     * \n     * @param {number} value - The new latitude to be set.\n     */\n    setLatitude(value) {\n        this.#weatherData.latitude = value;\n    }\n\n    /**\n     * Retrieves the longitude from the weather data.\n     * \n     * @returns {number|null} - The longitude if available, otherwise null.\n     */\n    getLongitude() {\n        return this.#weatherData.longitude || null;\n    }\n\n    /**\n     * Sets the longitude in the weather data.\n     * \n     * @param {number} value - The new longitude to be set.\n     */\n    setLongitude(value) {\n        this.#weatherData.longitude = value;\n    }\n\n    /**\n     * Retrieves the resolved address from the weather data.\n     * \n     * @returns {string|null} - The resolved address if available, otherwise null.\n     */\n    getResolvedAddress() {\n        return this.#weatherData.resolvedAddress || null;\n    }\n\n    /**\n     * Sets the resolved address in the weather data.\n     * \n     * @param {string} value - The new resolved address to be set.\n     */\n    setResolvedAddress(value) {\n        this.#weatherData.resolvedAddress = value;\n    }\n\n    /**\n     * Retrieves the address from the weather data.\n     * \n     * @returns {string|null} - The address if available, otherwise null.\n     */\n    getAddress() {\n        return this.#weatherData.address || null;\n    }\n\n    /**\n     * Sets the address in the weather data.\n     * \n     * @param {string} value - The new address to be set.\n     */\n    setAddress(value) {\n        this.#weatherData.address = value;\n    }\n\n    /**\n     * Retrieves the timezone from the weather data.\n     * \n     * @returns {string|null} - The timezone if available, otherwise null.\n     */\n    getTimezone() {\n        return this.#weatherData.timezone || null;\n    }\n\n    /**\n     * Sets the timezone in the weather data.\n     * \n     * @param {string} value - The new timezone to be set.\n     */\n    setTimezone(value) {\n        this.#weatherData.timezone = value;\n    }\n\n    /**\n     * Retrieves the timezone offset from the weather data.\n     * \n     * @returns {number|null} - The timezone offset if available, otherwise null.\n     */\n    getTzoffset() {\n        return this.#weatherData.tzoffset || null;\n    }\n\n    /**\n     * Sets the timezone offset in the weather data.\n     * \n     * @param {number} value - The new timezone offset to be set.\n     */\n    setTzoffset(value) {\n        this.#weatherData.tzoffset = value;\n    }\n\n    /**\n     * Retrieves the list of weather stations from the weather data.\n     * \n     * @returns {Array} - The list of weather stations if available, otherwise an empty list.\n     */\n    getStations() {\n        return this.#weatherData.stations || [];\n    }\n\n    /**\n     * Sets the list of weather stations in the weather data.\n     * \n     * @param {Array} value - The new list of weather stations to be set.\n     */\n    setStations(value) {\n        this.#weatherData.stations = value;\n    }\n\n    /**\n     * Retrieves a list of datetime objects representing each day's date from the weather data.\n     * \n     * @returns {Array<Date>} - A list of Date objects parsed from the 'datetime' key of each day in the weather data.\n     */\n    getDailyDatetimes() {\n        return this.#weatherData.days.map(day => new Date(day.datetime));\n    }\n\n    /**\n     * Retrieves a list of datetime objects representing each hour's datetime from the weather data.\n     * \n     * @returns {Array<Date>} - A list of Date objects parsed from the 'datetime' keys of each day and hour in the weather data.\n     */\n    getHourlyDatetimes() {\n        return this.#weatherData.days.flatMap(day =>\n            day.hours.map(hour => new Date(`${day.datetime}T${hour.datetime}`))\n        );\n    }\n\n    /**\n     * Retrieves weather data for a specific day based on a date string or index.\n     * \n     * @param {string|number} dayInfo - The identifier for the day, which can be a date string (YYYY-MM-DD) or an index of the day list.\n     * @param {Array<string>} elements - Specific weather elements to retrieve.\n     * @returns {object|null} - The weather data dictionary for the specified day.\n     */\n    getDataOnDay(dayInfo, elements = []) {\n        try {\n            let dayData;\n            if (typeof dayInfo === 'string') {\n                dayData = this.#weatherData.days.find(day => day.datetime === dayInfo);\n            } else if (typeof dayInfo === 'number') {\n                dayData = this.#weatherData.days[dayInfo];\n            } else {\n                throw new ValueError(`Invalid input value for getDataOnDay() with str or int: ${dayInfo}`);\n            }\n\n            if (elements.length > 0) {\n                return extractSubobjectByKeys(dayData, elements);\n            } else {\n                return dayData;\n            }\n        } catch (e) {\n            console.error(`Error accessing data on this day: ${e}`);\n            return null;\n        }\n    }\n\n    /**\n     * Updates weather data for a specific day based on a date string or index.\n     * \n     * @param {string|number} dayInfo - The identifier for the day, which can be a date string (YYYY-MM-DD) or an index of the day list.\n     * @param {object} data - The new weather data dictionary to replace the existing day's data.\n     */\n    setDataOnDay(dayInfo, data) {\n        try {\n            if (typeof dayInfo === 'string') {\n                for (let i = 0; i < this.#weatherData.days.length; i++) {\n                    if (this.#weatherData.days[i].datetime === dayInfo) {\n                        this.#weatherData.days[i] = data;\n                        break;\n                    }\n                }\n            } else if (typeof dayInfo === 'number') {\n                this.#weatherData.days[dayInfo] = data;\n            } else {\n                throw new ValueError(`Invalid input day value for setDataOnDay() with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Retrieves the temperature for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @returns {number|null} - The temperature for the specified day.\n     */\n    getTempOnDay(dayInfo) {\n        try {\n            if (typeof dayInfo === 'string') {\n                return this.#weatherData.days.find(day => day.datetime === dayInfo)?.temp || null;\n            } else if (typeof dayInfo === 'number') {\n                return this.#weatherData.days[dayInfo]?.temp || null;\n            } else {\n                throw new ValueError(`Invalid input value for dayInfo: ${dayInfo}. Expected a date string or day index.`);\n            }\n        } catch (e) {\n            console.error(`Error accessing temperature data: ${e}`);\n            return null;\n        }\n    }\n\n    /**\n     * Sets the temperature for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @param {number} value - The new temperature value to set.\n     */\n    setTempOnDay(dayInfo, value) {\n        try {\n            if (typeof dayInfo === 'string') {\n                let day = this.#weatherData.days.find(day => day.datetime === dayInfo);\n                if (day) day.temp = value;\n            } else if (typeof dayInfo === 'number') {\n                this.#weatherData.days[dayInfo].temp = value;\n            } else {\n                throw new ValueError(`Invalid input value for dayInfo: ${dayInfo}. Expected a date string or day index.`);\n            }\n        } catch (e) {\n            throw new Error(`Error setting temperature data: ${e}`);\n        }\n    }\n\n    /**\n     * Retrieves the maximum temperature for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @returns {number|null} - The maximum temperature for the specified day.\n     */\n    getTempmaxOnDay(dayInfo) {\n        try {\n            if (typeof dayInfo === 'string') {\n                return this.#weatherData.days.find(day => day.datetime === dayInfo)?.tempmax || null;\n            } else if (typeof dayInfo === 'number') {\n                return this.#weatherData.days[dayInfo]?.tempmax || null;\n            } else {\n                throw new ValueError(`Invalid input value for getTempmaxOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            console.error(`Error accessing maximum temperature data: ${e}`);\n            return null;\n        }\n    }\n\n    /**\n     * Sets the maximum temperature for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @param {number} value - The new maximum temperature value to set.\n     */\n    setTempmaxOnDay(dayInfo, value) {\n        try {\n            if (typeof dayInfo === 'string') {\n                for (let day of this.#weatherData.days) {\n                    if (day.datetime === dayInfo) {\n                        day.tempmax = value;\n                        break;\n                    }\n                }\n            } else if (typeof dayInfo === 'number') {\n                this.#weatherData.days[dayInfo].tempmax = value;\n            } else {\n                throw new ValueError(`Invalid input day value for setTempmaxOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            throw new Error(`Error setting maximum temperature data: ${e}`);\n        }\n    }\n\n    /**\n     * Retrieves the minimum temperature for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @returns {number|null} - The minimum temperature for the specified day.\n     */\n    getTempminOnDay(dayInfo) {\n        try {\n            if (typeof dayInfo === 'string') {\n                return this.#weatherData.days.find(day => day.datetime === dayInfo)?.tempmin || null;\n            } else if (typeof dayInfo === 'number') {\n                return this.#weatherData.days[dayInfo]?.tempmin || null;\n            } else {\n                throw new ValueError(`Invalid input value for getTempminOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            console.error(`Error accessing minimum temperature data: ${e}`);\n            return null;\n        }\n    }\n\n    /**\n     * Sets the minimum temperature for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @param {number} value - The new minimum temperature value to set.\n     */\n    setTempminOnDay(dayInfo, value) {\n        try {\n            if (typeof dayInfo === 'string') {\n                for (let day of this.#weatherData.days) {\n                    if (day.datetime === dayInfo) {\n                        day.tempmin = value;\n                        break;\n                    }\n                }\n            } else if (typeof dayInfo === 'number') {\n                this.#weatherData.days[dayInfo].tempmin = value;\n            } else {\n                throw new ValueError(`Invalid input day value for setTempminOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            throw new Error(`Error setting minimum temperature data: ${e}`);\n        }\n    }\n\n    /**\n     * Retrieves the 'feels like' temperature for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @returns {number|null} - The 'feels like' temperature for the specified day.\n     */\n    getFeelslikeOnDay(dayInfo) {\n        try {\n            if (typeof dayInfo === 'string') {\n                return this.#weatherData.days.find(day => day.datetime === dayInfo)?.feelslike || null;\n            } else if (typeof dayInfo === 'number') {\n                return this.#weatherData.days[dayInfo]?.feelslike || null;\n            } else {\n                throw new ValueError(`Invalid input value for getFeelslikeOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            console.error(`Error accessing 'feels like' temperature data: ${e}`);\n            return null;\n        }\n    }\n\n    /**\n     * Sets the 'feels like' temperature for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @param {number} value - The new 'feels like' temperature value to set.\n     */\n    setFeelslikeOnDay(dayInfo, value) {\n        try {\n            if (typeof dayInfo === 'string') {\n                for (let day of this.#weatherData.days) {\n                    if (day.datetime === dayInfo) {\n                        day.feelslike = value;\n                        break;\n                    }\n                }\n            } else if (typeof dayInfo === 'number') {\n                this.#weatherData.days[dayInfo].feelslike = value;\n            } else {\n                throw new ValueError(`Invalid input day value for setFeelslikeOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            throw new Error(`Error setting 'feels like' temperature data: ${e}`);\n        }\n    }\n\n    /**\n     * Retrieves the maximum 'feels like' temperature for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @returns {number|null} - The maximum 'feels like' temperature for the specified day.\n     */\n    getFeelslikemaxOnDay(dayInfo) {\n        try {\n            if (typeof dayInfo === 'string') {\n                return this.#weatherData.days.find(day => day.datetime === dayInfo)?.feelslikemax || null;\n            } else if (typeof dayInfo === 'number') {\n                return this.#weatherData.days[dayInfo]?.feelslikemax || null;\n            } else {\n                throw new ValueError(`Invalid input value for getFeelslikemaxOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            console.error(`Error accessing 'feels like max' temperature data: ${e}`);\n            return null;\n        }\n    }\n\n    /**\n     * Sets the maximum 'feels like' temperature for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @param {number} value - The new maximum 'feels like' temperature value to set.\n     */\n    setFeelslikemaxOnDay(dayInfo, value) {\n        try {\n            if (typeof dayInfo === 'string') {\n                for (let day of this.#weatherData.days) {\n                    if (day.datetime === dayInfo) {\n                        day.feelslikemax = value;\n                        break;\n                    }\n                }\n            } else if (typeof dayInfo === 'number') {\n                this.#weatherData.days[dayInfo].feelslikemax = value;\n            } else {\n                throw new ValueError(`Invalid input day value for setFeelslikemaxOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            throw new Error(`Error setting 'feels like max' temperature data: ${e}`);\n        }\n    }\n\n    /**\n     * Retrieves the minimum 'feels like' temperature for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @returns {number|null} - The minimum 'feels like' temperature for the specified day.\n     */\n    getFeelslikeminOnDay(dayInfo) {\n        try {\n            if (typeof dayInfo === 'string') {\n                return this.#weatherData.days.find(day => day.datetime === dayInfo)?.feelslikemin || null;\n            } else if (typeof dayInfo === 'number') {\n                return this.#weatherData.days[dayInfo]?.feelslikemin || null;\n            } else {\n                throw new ValueError(`Invalid input value for getFeelslikeminOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            console.error(`Error accessing 'feels like min' temperature data: ${e}`);\n            return null;\n        }\n    }\n\n    /**\n     * Sets the minimum 'feels like' temperature for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @param {number} value - The new minimum temperature value to set.\n     */\n    setFeelslikeminOnDay(dayInfo, value) {\n        try {\n            if (typeof dayInfo === 'string') {\n                for (let day of this.#weatherData.days) {\n                    if (day.datetime === dayInfo) {\n                        day.feelslikemin = value;\n                        break;\n                    }\n                }\n            } else if (typeof dayInfo === 'number') {\n                this.#weatherData.days[dayInfo].feelslikemin = value;\n            } else {\n                throw new ValueError(`Invalid input day value for setFeelslikeminOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            throw new Error(`Error setting 'feels like min' temperature data: ${e}`);\n        }\n    }\n\n    /**\n     * Retrieves the dew point for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @returns {number|null} - The dew point for the specified day.\n     */\n    getDewOnDay(dayInfo) {\n        try {\n            if (typeof dayInfo === 'string') {\n                return this.#weatherData.days.find(day => day.datetime === dayInfo)?.dew || null;\n            } else if (typeof dayInfo === 'number') {\n                return this.#weatherData.days[dayInfo]?.dew || null;\n            } else {\n                throw new ValueError(`Invalid input value for getDewOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            console.error(`Error accessing dew point data: ${e}`);\n            return null;\n        }\n    }\n\n    /**\n     * Sets the dew point for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @param {number} value - The new dew point value to set.\n     */\n    setDewOnDay(dayInfo, value) {\n        try {\n            if (typeof dayInfo === 'string') {\n                for (let day of this.#weatherData.days) {\n                    if (day.datetime === dayInfo) {\n                        day.dew = value;\n                        break;\n                    }\n                }\n            } else if (typeof dayInfo === 'number') {\n                this.#weatherData.days[dayInfo].dew = value;\n            } else {\n                throw new ValueError(`Invalid input day value for setDewOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            throw new Error(`Error setting dew point data: ${e}`);\n        }\n    }\n\n\n    /**\n     * Retrieves the humidity percentage for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @returns {number|null} - The humidity percentage for the specified day.\n     */\n    getHumidityOnDay(dayInfo) {\n        try {\n            if (typeof dayInfo === 'string') {\n                return this.#weatherData.days.find(day => day.datetime === dayInfo)?.humidity || null;\n            } else if (typeof dayInfo === 'number') {\n                return this.#weatherData.days[dayInfo]?.humidity || null;\n            } else {\n                throw new Error(`Invalid input value for getHumidityOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            console.error(`Error accessing humidity data: ${e}`);\n            return null;\n        }\n    }\n\n    /**\n     * Sets the humidity percentage for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @param {number} value - The new humidity percentage value to set.\n     */\n    setHumidityOnDay(dayInfo, value) {\n        try {\n            if (typeof dayInfo === 'string') {\n                for (let day of this.#weatherData.days) {\n                    if (day.datetime === dayInfo) {\n                        day.humidity = value;\n                        break;\n                    }\n                }\n            } else if (typeof dayInfo === 'number') {\n                this.#weatherData.days[dayInfo].humidity = value;\n            } else {\n                throw new Error(`Invalid input day value for setHumidityOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            throw new Error(`Error setting humidity data: ${e}`);\n        }\n    }\n\n    /**\n     * Retrieves the precipitation amount for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @returns {number|null} - The precipitation amount for the specified day.\n     */\n    getPrecipOnDay(dayInfo) {\n        try {\n            if (typeof dayInfo === 'string') {\n                return this.#weatherData.days.find(day => day.datetime === dayInfo)?.precip || null;\n            } else if (typeof dayInfo === 'number') {\n                return this.#weatherData.days[dayInfo]?.precip || null;\n            } else {\n                throw new Error(`Invalid input value for getPrecipOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            console.error(`Error accessing precipitation data: ${e}`);\n            return null;\n        }\n    }\n\n    /**\n     * Sets the precipitation amount for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @param {number} value - The new precipitation amount value to set.\n     */\n    setPrecipOnDay(dayInfo, value) {\n        try {\n            if (typeof dayInfo === 'string') {\n                for (let day of this.#weatherData.days) {\n                    if (day.datetime === dayInfo) {\n                        day.precip = value;\n                        break;\n                    }\n                }\n            } else if (typeof dayInfo === 'number') {\n                this.#weatherData.days[dayInfo].precip = value;\n            } else {\n                throw new Error(`Invalid input day value for setPrecipOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            throw new Error(`Error setting precipitation data: ${e}`);\n        }\n    }\n\n    /**\n     * Retrieves the probability of precipitation for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @returns {number|null} - The probability of precipitation for the specified day.\n     */\n    getPrecipprobOnDay(dayInfo) {\n        try {\n            if (typeof dayInfo === 'string') {\n                return this.#weatherData.days.find(day => day.datetime === dayInfo)?.precipprob || null;\n            } else if (typeof dayInfo === 'number') {\n                return this.#weatherData.days[dayInfo]?.precipprob || null;\n            } else {\n                throw new Error(`Invalid input value for getPrecipprobOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            console.error(`Error accessing precipitation probability data: ${e}`);\n            return null;\n        }\n    }\n\n    /**\n     * Sets the probability of precipitation for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @param {number} value - The new probability of precipitation value to set.\n     */\n    setPrecipprobOnDay(dayInfo, value) {\n        try {\n            if (typeof dayInfo === 'string') {\n                for (let day of this.#weatherData.days) {\n                    if (day.datetime === dayInfo) {\n                        day.precipprob = value;\n                        break;\n                    }\n                }\n            } else if (typeof dayInfo === 'number') {\n                this.#weatherData.days[dayInfo].precipprob = value;\n            } else {\n                throw new Error(`Invalid input day value for setPrecipprobOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            throw new Error(`Error setting precipitation probability data: ${e}`);\n        }\n    }\n\n    /**\n     * Retrieves the precipitation coverage for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @returns {number|null} - The precipitation coverage for the specified day.\n     */\n    getPrecipcoverOnDay(dayInfo) {\n        try {\n            if (typeof dayInfo === 'string') {\n                return this.#weatherData.days.find(day => day.datetime === dayInfo)?.precipcover || null;\n            } else if (typeof dayInfo === 'number') {\n                return this.#weatherData.days[dayInfo]?.precipcover || null;\n            } else {\n                throw new Error(`Invalid input value for getPrecipcoverOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            console.error(`Error accessing precipitation coverage data: ${e}`);\n            return null;\n        }\n    }\n\n    /**\n     * Sets the precipitation coverage for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @param {number} value - The new precipitation coverage value to set.\n     */\n    setPrecipcoverOnDay(dayInfo, value) {\n        try {\n            if (typeof dayInfo === 'string') {\n                for (let day of this.#weatherData.days) {\n                    if (day.datetime === dayInfo) {\n                        day.precipcover = value;\n                        break;\n                    }\n                }\n            } else if (typeof dayInfo === 'number') {\n                this.#weatherData.days[dayInfo].precipcover = value;\n            } else {\n                throw new Error(`Invalid input day value for setPrecipcoverOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            throw new Error(`Error setting precipitation coverage data: ${e}`);\n        }\n    }\n\n    /**\n     * Retrieves the type of precipitation for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @returns {string|null} - The type of precipitation for the specified day.\n     */\n    getPreciptypeOnDay(dayInfo) {\n        try {\n            if (typeof dayInfo === 'string') {\n                return this.#weatherData.days.find(day => day.datetime === dayInfo)?.preciptype || null;\n            } else if (typeof dayInfo === 'number') {\n                return this.#weatherData.days[dayInfo]?.preciptype || null;\n            } else {\n                throw new Error(`Invalid input value for getPreciptypeOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            console.error(`Error accessing precipitation type data: ${e}`);\n            return null;\n        }\n    }\n\n    /**\n     * Sets the type of precipitation for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @param {string} value - The new type of precipitation value to set.\n     */\n    setPreciptypeOnDay(dayInfo, value) {\n        try {\n            if (typeof dayInfo === 'string') {\n                for (let day of this.#weatherData.days) {\n                    if (day.datetime === dayInfo) {\n                        day.preciptype = value;\n                        break;\n                    }\n                }\n            } else if (typeof dayInfo === 'number') {\n                this.#weatherData.days[dayInfo].preciptype = value;\n            } else {\n                throw new Error(`Invalid input day value for setPreciptypeOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            throw new Error(`Error setting precipitation type data: ${e}`);\n        }\n    }\n\n    /**\n     * Retrieves the snowfall amount for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @returns {number|null} - The snowfall amount for the specified day.\n     */\n    getSnowOnDay(dayInfo) {\n        try {\n            if (typeof dayInfo === 'string') {\n                return this.#weatherData.days.find(day => day.datetime === dayInfo)?.snow || null;\n            } else if (typeof dayInfo === 'number') {\n                return this.#weatherData.days[dayInfo]?.snow || null;\n            } else {\n                throw new Error(`Invalid input value for getSnowOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            console.error(`Error accessing snow data: ${e}`);\n            return null;\n        }\n    }\n\n    /**\n     * Sets the snowfall amount for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @param {number} value - The new snowfall amount to set.\n     */\n    setSnowOnDay(dayInfo, value) {\n        try {\n            if (typeof dayInfo === 'string') {\n                for (let day of this.#weatherData.days) {\n                    if (day.datetime === dayInfo) {\n                        day.snow = value;\n                        break;\n                    }\n                }\n            } else if (typeof dayInfo === 'number') {\n                this.#weatherData.days[dayInfo].snow = value;\n            } else {\n                throw new Error(`Invalid input day value for setSnowOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            throw new Error(`Error setting snow data: ${e}`);\n        }\n    }\n\n    /**\n     * Retrieves the snow depth for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @returns {number|null} - The snow depth for the specified day.\n     */\n    getSnowdepthOnDay(dayInfo) {\n        try {\n            if (typeof dayInfo === 'string') {\n                return this.#weatherData.days.find(day => day.datetime === dayInfo)?.snowdepth || null;\n            } else if (typeof dayInfo === 'number') {\n                return this.#weatherData.days[dayInfo]?.snowdepth || null;\n            } else {\n                throw new Error(`Invalid input value for getSnowdepthOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            console.error(`Error accessing snow depth data: ${e}`);\n            return null;\n        }\n    }\n\n    /**\n     * Sets the snow depth for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @param {number} value - The new snow depth to set.\n     */\n    setSnowdepthOnDay(dayInfo, value) {\n        try {\n            if (typeof dayInfo === 'string') {\n                for (let day of this.#weatherData.days) {\n                    if (day.datetime === dayInfo) {\n                        day.snowdepth = value;\n                        break;\n                    }\n                }\n            } else if (typeof dayInfo === 'number') {\n                this.#weatherData.days[dayInfo].snowdepth = value;\n            } else {\n                throw new Error(`Invalid input day value for setSnowdepthOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            throw new Error(`Error setting snow depth data: ${e}`);\n        }\n    }\n\n    /**\n     * Retrieves the wind gust value for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @returns {number|null} - The wind gust value for the specified day.\n     */\n    getWindgustOnDay(dayInfo) {\n        try {\n            if (typeof dayInfo === 'string') {\n                return this.#weatherData.days.find(day => day.datetime === dayInfo)?.windgust || null;\n            } else if (typeof dayInfo === 'number') {\n                return this.#weatherData.days[dayInfo]?.windgust || null;\n            } else {\n                throw new Error(`Invalid input value for getWindgustOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            console.error(`Error accessing wind gust data: ${e}`);\n            return null;\n        }\n    }\n\n    /**\n     * Sets the wind gust value for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @param {number} value - The new wind gust value to set.\n     */\n    setWindgustOnDay(dayInfo, value) {\n        try {\n            if (typeof dayInfo === 'string') {\n                for (let day of this.#weatherData.days) {\n                    if (day.datetime === dayInfo) {\n                        day.windgust = value;\n                        break;\n                    }\n                }\n            } else if (typeof dayInfo === 'number') {\n                this.#weatherData.days[dayInfo].windgust = value;\n            } else {\n                throw new Error(`Invalid input day value for setWindgustOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            throw new Error(`Error setting wind gust data: ${e}`);\n        }\n    }\n\n    /**\n     * Retrieves the wind speed for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @returns {number|null} - The wind speed for the specified day.\n     */\n    getWindspeedOnDay(dayInfo) {\n        try {\n            if (typeof dayInfo === 'string') {\n                return this.#weatherData.days.find(day => day.datetime === dayInfo)?.windspeed || null;\n            } else if (typeof dayInfo === 'number') {\n                return this.#weatherData.days[dayInfo]?.windspeed || null;\n            } else {\n                throw new Error(`Invalid input value for getWindspeedOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            console.error(`Error accessing wind speed data: ${e}`);\n            return null;\n        }\n    }\n\n    /**\n     * Sets the wind speed for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @param {number} value - The new wind speed value to set.\n     */\n    setWindspeedOnDay(dayInfo, value) {\n        try {\n            if (typeof dayInfo === 'string') {\n                for (let day of this.#weatherData.days) {\n                    if (day.datetime === dayInfo) {\n                        day.windspeed = value;\n                        break;\n                    }\n                }\n            } else if (typeof dayInfo === 'number') {\n                this.#weatherData.days[dayInfo].windspeed = value;\n            } else {\n                throw new Error(`Invalid input day value for setWindspeedOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            throw new Error(`Error setting wind speed data: ${e}`);\n        }\n    }\n\n    /**\n     * Retrieves the wind direction for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @returns {number|null} - The wind direction for the specified day.\n     */\n    getWinddirOnDay(dayInfo) {\n        try {\n            if (typeof dayInfo === 'string') {\n                return this.#weatherData.days.find(day => day.datetime === dayInfo)?.winddir || null;\n            } else if (typeof dayInfo === 'number') {\n                return this.#weatherData.days[dayInfo]?.winddir || null;\n            } else {\n                throw new Error(`Invalid input value for getWinddirOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            console.error(`Error accessing wind direction data: ${e}`);\n            return null;\n        }\n    }\n\n    /**\n     * Sets the wind direction for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @param {number} value - The new wind direction value to set.\n     */\n    setWinddirOnDay(dayInfo, value) {\n        try {\n            if (typeof dayInfo === 'string') {\n                for (let day of this.#weatherData.days) {\n                    if (day.datetime === dayInfo) {\n                        day.winddir = value;\n                        break;\n                    }\n                }\n            } else if (typeof dayInfo === 'number') {\n                this.#weatherData.days[dayInfo].winddir = value;\n            } else {\n                throw new Error(`Invalid input day value for setWinddirOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            throw new Error(`Error setting wind direction data: ${e}`);\n        }\n    }\n\n    /**\n     * Retrieves the atmospheric pressure for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @returns {number|null} - The atmospheric pressure for the specified day.\n     */\n    getPressureOnDay(dayInfo) {\n        try {\n            if (typeof dayInfo === 'string') {\n                return this.#weatherData.days.find(day => day.datetime === dayInfo)?.pressure || null;\n            } else if (typeof dayInfo === 'number') {\n                return this.#weatherData.days[dayInfo]?.pressure || null;\n            } else {\n                throw new Error(`Invalid input value for getPressureOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            console.error(`Error accessing pressure data: ${e}`);\n            return null;\n        }\n    }\n\n    /**\n     * Sets the atmospheric pressure for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @param {number} value - The new pressure value to set.\n     */\n    setPressureOnDay(dayInfo, value) {\n        try {\n            if (typeof dayInfo === 'string') {\n                for (let day of this.#weatherData.days) {\n                    if (day.datetime === dayInfo) {\n                        day.pressure = value;\n                        break;\n                    }\n                }\n            } else if (typeof dayInfo === 'number') {\n                this.#weatherData.days[dayInfo].pressure = value;\n            } else {\n                throw new Error(`Invalid input day value for setPressureOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            throw new Error(`Error setting pressure data: ${e}`);\n        }\n    }\n\n    /**\n     * Retrieves the cloud cover percentage for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @returns {number|null} - The cloud cover percentage for the specified day.\n     */\n    getCloudcoverOnDay(dayInfo) {\n        try {\n            if (typeof dayInfo === 'string') {\n                return this.#weatherData.days.find(day => day.datetime === dayInfo)?.cloudcover || null;\n            } else if (typeof dayInfo === 'number') {\n                return this.#weatherData.days[dayInfo]?.cloudcover || null;\n            } else {\n                throw new Error(`Invalid input value for getCloudcoverOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            console.error(`Error accessing cloud cover data: ${e}`);\n            return null;\n        }\n    }\n\n    /**\n     * Sets the cloud cover percentage for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @param {number} value - The new cloud cover percentage to set.\n     */\n    setCloudcoverOnDay(dayInfo, value) {\n        try {\n            if (typeof dayInfo === 'string') {\n                for (let day of this.#weatherData.days) {\n                    if (day.datetime === dayInfo) {\n                        day.cloudcover = value;\n                        break;\n                    }\n                }\n            } else if (typeof dayInfo === 'number') {\n                this.#weatherData.days[dayInfo].cloudcover = value;\n            } else {\n                throw new Error(`Invalid input day value for setCloudcoverOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            throw new Error(`Error setting cloud cover data: ${e}`);\n        }\n    }\n\n    /**\n     * Retrieves the visibility distance for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @returns {number|null} - The visibility distance for the specified day.\n     */\n    getVisibilityOnDay(dayInfo) {\n        try {\n            if (typeof dayInfo === 'string') {\n                return this.#weatherData.days.find(day => day.datetime === dayInfo)?.visibility || null;\n            } else if (typeof dayInfo === 'number') {\n                return this.#weatherData.days[dayInfo]?.visibility || null;\n            } else {\n                throw new Error(`Invalid input value for getVisibilityOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            console.error(`Error accessing visibility data: ${e}`);\n            return null;\n        }\n    }\n\n    /**\n     * Sets the visibility distance for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @param {number} value - The new visibility distance to set.\n     */\n    setVisibilityOnDay(dayInfo, value) {\n        try {\n            if (typeof dayInfo === 'string') {\n                for (let day of this.#weatherData.days) {\n                    if (day.datetime === dayInfo) {\n                        day.visibility = value;\n                        break;\n                    }\n                }\n            } else if (typeof dayInfo === 'number') {\n                this.#weatherData.days[dayInfo].visibility = value;\n            } else {\n                throw new Error(`Invalid input day value for setVisibilityOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            throw new Error(`Error setting visibility data: ${e}`);\n        }\n    }\n\n    /**\n     * Retrieves the solar radiation level for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @returns {number|null} - The solar radiation level for the specified day.\n     */\n    getSolarradiationOnDay(dayInfo) {\n        try {\n            if (typeof dayInfo === 'string') {\n                return this.#weatherData.days.find(day => day.datetime === dayInfo)?.solarradiation || null;\n            } else if (typeof dayInfo === 'number') {\n                return this.#weatherData.days[dayInfo]?.solarradiation || null;\n            } else {\n                throw new Error(`Invalid input value for getSolarradiationOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            console.error(`Error accessing solar radiation data: ${e}`);\n            return null;\n        }\n    }\n\n    /**\n     * Sets the solar radiation level for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @param {number} value - The new solar radiation level to set.\n     */\n    setSolarradiationOnDay(dayInfo, value) {\n        try {\n            if (typeof dayInfo === 'string') {\n                for (let day of this.#weatherData.days) {\n                    if (day.datetime === dayInfo) {\n                        day.solarradiation = value;\n                        break;\n                    }\n                }\n            } else if (typeof dayInfo === 'number') {\n                this.#weatherData.days[dayInfo].solarradiation = value;\n            } else {\n                throw new Error(`Invalid input day value for setSolarradiationOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            throw new Error(`Error setting solar radiation data: ${e}`);\n        }\n    }\n\n    /**\n     * Retrieves the solar energy generated on a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @returns {number|null} - The solar energy generated on the specified day.\n     */\n    getSolarenergyOnDay(dayInfo) {\n        try {\n            if (typeof dayInfo === 'string') {\n                return this.#weatherData.days.find(day => day.datetime === dayInfo)?.solarenergy || null;\n            } else if (typeof dayInfo === 'number') {\n                return this.#weatherData.days[dayInfo]?.solarenergy || null;\n            } else {\n                throw new Error(`Invalid input value for getSolarenergyOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            console.error(`Error accessing solar energy data: ${e}`);\n            return null;\n        }\n    }\n\n    /**\n     * Sets the solar energy level for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @param {number} value - The new solar energy level to set.\n     */\n    setSolarenergyOnDay(dayInfo, value) {\n        try {\n            if (typeof dayInfo === 'string') {\n                for (let day of this.#weatherData.days) {\n                    if (day.datetime === dayInfo) {\n                        day.solarenergy = value;\n                        break;\n                    }\n                }\n            } else if (typeof dayInfo === 'number') {\n                this.#weatherData.days[dayInfo].solarenergy = value;\n            } else {\n                throw new Error(`Invalid input day value for setSolarenergyOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            throw new Error(`Error setting solar energy data: ${e}`);\n        }\n    }\n\n    /**\n     * Retrieves the UV index for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @returns {number|null} - The UV index for the specified day.\n     */\n    getUvindexOnDay(dayInfo) {\n        try {\n            if (typeof dayInfo === 'string') {\n                return this.#weatherData.days.find(day => day.datetime === dayInfo)?.uvindex || null;\n            } else if (typeof dayInfo === 'number') {\n                return this.#weatherData.days[dayInfo]?.uvindex || null;\n            } else {\n                throw new Error(`Invalid input value for getUvindexOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            console.error(`Error accessing UV index data: ${e}`);\n            return null;\n        }\n    }\n\n    /**\n     * Sets the UV index for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @param {number} value - The new UV index value to set.\n     */\n    setUvindexOnDay(dayInfo, value) {\n        try {\n            if (typeof dayInfo === 'string') {\n                for (let day of this.#weatherData.days) {\n                    if (day.datetime === dayInfo) {\n                        day.uvindex = value;\n                        break;\n                    }\n                }\n            } else if (typeof dayInfo === 'number') {\n                this.#weatherData.days[dayInfo].uvindex = value;\n            } else {\n                throw new Error(`Invalid input day value for setUvindexOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            throw new Error(`Error setting UV index data: ${e}`);\n        }\n    }\n\n    /**\n     * Retrieves the severe weather risk level for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @returns {number|null} - The severe weather risk level for the specified day.\n     */\n    getSevereriskOnDay(dayInfo) {\n        try {\n            if (typeof dayInfo === 'string') {\n                return this.#weatherData.days.find(day => day.datetime === dayInfo)?.severerisk || null;\n            } else if (typeof dayInfo === 'number') {\n                return this.#weatherData.days[dayInfo]?.severerisk || null;\n            } else {\n                throw new Error(`Invalid input value for getSevereriskOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            console.error(`Error accessing severe risk data: ${e}`);\n            return null;\n        }\n    }\n\n    /**\n     * Sets the severe weather risk level for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @param {number} value - The new severe weather risk level to set.\n     */\n    setSevereriskOnDay(dayInfo, value) {\n        try {\n            if (typeof dayInfo === 'string') {\n                for (let day of this.#weatherData.days) {\n                    if (day.datetime === dayInfo) {\n                        day.severerisk = value;\n                        break;\n                    }\n                }\n            } else if (typeof dayInfo === 'number') {\n                this.#weatherData.days[dayInfo].severerisk = value;\n            } else {\n                throw new Error(`Invalid input day value for setSevereriskOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            throw new Error(`Error setting severe risk data: ${e}`);\n        }\n    }\n\n    /**\n     * Retrieves the sunrise time for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @returns {string|null} - The sunrise time for the specified day.\n     */\n    getSunriseOnDay(dayInfo) {\n        try {\n            if (typeof dayInfo === 'string') {\n                return this.#weatherData.days.find(day => day.datetime === dayInfo)?.sunrise || null;\n            } else if (typeof dayInfo === 'number') {\n                return this.#weatherData.days[dayInfo]?.sunrise || null;\n            } else {\n                throw new Error(`Invalid input value for getSunriseOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            console.error(`Error accessing sunrise data: ${e}`);\n            return null;\n        }\n    }\n\n    /**\n     * Sets the sunrise time for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @param {string} value - The new sunrise time value to set.\n     */\n    setSunriseOnDay(dayInfo, value) {\n        try {\n            if (typeof dayInfo === 'string') {\n                for (let day of this.#weatherData.days) {\n                    if (day.datetime === dayInfo) {\n                        day.sunrise = value;\n                        break;\n                    }\n                }\n            } else if (typeof dayInfo === 'number') {\n                this.#weatherData.days[dayInfo].sunrise = value;\n            } else {\n                throw new Error(`Invalid input day value for setSunriseOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            throw new Error(`Error setting sunrise data: ${e}`);\n        }\n    }\n\n    /**\n     * Retrieves the Unix timestamp for the sunrise time for a specific day.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @returns {number|null} - The sunrise Unix timestamp for the specified day.\n     */\n    getSunriseEpochOnDay(dayInfo) {\n        try {\n            if (typeof dayInfo === 'string') {\n                return this.#weatherData.days.find(day => day.datetime === dayInfo)?.sunriseEpoch || null;\n            } else if (typeof dayInfo === 'number') {\n                return this.#weatherData.days[dayInfo]?.sunriseEpoch || null;\n            } else {\n                throw new Error(`Invalid input value for getSunriseEpochOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            console.error(`Error accessing sunrise epoch data: ${e}`);\n            return null;\n        }\n    }\n\n    /**\n     * Sets the Unix timestamp for the sunrise time for a specific day.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @param {number} value - The new sunrise Unix timestamp value to set.\n     */\n    setSunriseEpochOnDay(dayInfo, value) {\n        try {\n            if (typeof dayInfo === 'string') {\n                for (let day of this.#weatherData.days) {\n                    if (day.datetime === dayInfo) {\n                        day.sunriseEpoch = value;\n                        break;\n                    }\n                }\n            } else if (typeof dayInfo === 'number') {\n                this.#weatherData.days[dayInfo].sunriseEpoch = value;\n            } else {\n                throw new Error(`Invalid input day value for setSunriseEpochOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            throw new Error(`Error setting sunrise epoch data: ${e}`);\n        }\n    }\n\n    /**\n     * Retrieves the sunset time for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @returns {string|null} - The sunset time for the specified day.\n     */\n    getSunsetOnDay(dayInfo) {\n        try {\n            if (typeof dayInfo === 'string') {\n                return this.#weatherData.days.find(day => day.datetime === dayInfo)?.sunset || null;\n            } else if (typeof dayInfo === 'number') {\n                return this.#weatherData.days[dayInfo]?.sunset || null;\n            } else {\n                throw new Error(`Invalid input value for getSunsetOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            console.error(`Error accessing sunset data: ${e}`);\n            return null;\n        }\n    }\n\n    /**\n     * Sets the sunset time for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @param {string} value - The new sunset time value to set.\n     */\n    setSunsetOnDay(dayInfo, value) {\n        try {\n            if (typeof dayInfo === 'string') {\n                for (let day of this.#weatherData.days) {\n                    if (day.datetime === dayInfo) {\n                        day.sunset = value;\n                        break;\n                    }\n                }\n            } else if (typeof dayInfo === 'number') {\n                this.#weatherData.days[dayInfo].sunset = value;\n            } else {\n                throw new Error(`Invalid input day value for setSunsetOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            throw new Error(`Error setting sunset data: ${e}`);\n        }\n    }\n\n    /**\n     * Retrieves the Unix timestamp for the sunset time for a specific day.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @returns {number|null} - The sunset Unix timestamp for the specified day.\n     */\n    getSunsetEpochOnDay(dayInfo) {\n        try {\n            if (typeof dayInfo === 'string') {\n                return this.#weatherData.days.find(day => day.datetime === dayInfo)?.sunsetEpoch || null;\n            } else if (typeof dayInfo === 'number') {\n                return this.#weatherData.days[dayInfo]?.sunsetEpoch || null;\n            } else {\n                throw new Error(`Invalid input value for getSunsetEpochOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            console.error(`Error accessing sunset epoch data: ${e}`);\n            return null;\n        }\n    }\n\n    /**\n     * Sets the Unix timestamp for the sunset time for a specific day.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @param {number} value - The new sunset Unix timestamp value to set.\n     */\n    setSunsetEpochOnDay(dayInfo, value) {\n        try {\n            if (typeof dayInfo === 'string') {\n                for (let day of this.#weatherData.days) {\n                    if (day.datetime === dayInfo) {\n                        day.sunsetEpoch = value;\n                        break;\n                    }\n                }\n            } else if (typeof dayInfo === 'number') {\n                this.#weatherData.days[dayInfo].sunsetEpoch = value;\n            } else {\n                throw new Error(`Invalid input day value for setSunsetEpochOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            throw new Error(`Error setting sunset epoch data: ${e}`);\n        }\n    }\n\n    /**\n     * Retrieves the moon phase for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @returns {number|null} - The moon phase for the specified day.\n     */\n    getMoonphaseOnDay(dayInfo) {\n        try {\n            if (typeof dayInfo === 'string') {\n                return this.#weatherData.days.find(day => day.datetime === dayInfo)?.moonphase || null;\n            } else if (typeof dayInfo === 'number') {\n                return this.#weatherData.days[dayInfo]?.moonphase || null;\n            } else {\n                throw new Error(`Invalid input value for getMoonphaseOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            console.error(`Error accessing moon phase data: ${e}`);\n            return null;\n        }\n    }\n\n    /**\n     * Sets the moon phase for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @param {number} value - The new moon phase value to set.\n     */\n    setMoonphaseOnDay(dayInfo, value) {\n        try {\n            if (typeof dayInfo === 'string') {\n                for (let day of this.#weatherData.days) {\n                    if (day.datetime === dayInfo) {\n                        day.moonphase = value;\n                        break;\n                    }\n                }\n            } else if (typeof dayInfo === 'number') {\n                this.#weatherData.days[dayInfo].moonphase = value;\n            } else {\n                throw new Error(`Invalid input day value for setMoonphaseOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            throw new Error(`Error setting moon phase data: ${e}`);\n        }\n    }\n\n    /**\n     * Retrieves the weather conditions for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @returns {string|null} - The weather conditions for the specified day.\n     */\n    getConditionsOnDay(dayInfo) {\n        try {\n            if (typeof dayInfo === 'string') {\n                return this.#weatherData.days.find(day => day.datetime === dayInfo)?.conditions || null;\n            } else if (typeof dayInfo === 'number') {\n                return this.#weatherData.days[dayInfo]?.conditions || null;\n            } else {\n                throw new Error(`Invalid input value for getConditionsOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            console.error(`Error accessing conditions data: ${e}`);\n            return null;\n        }\n    }\n\n    /**\n     * Sets the weather conditions for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @param {string} value - The new conditions value to set.\n     */\n    setConditionsOnDay(dayInfo, value) {\n        try {\n            if (typeof dayInfo === 'string') {\n                for (let day of this.#weatherData.days) {\n                    if (day.datetime === dayInfo) {\n                        day.conditions = value;\n                        break;\n                    }\n                }\n            } else if (typeof dayInfo === 'number') {\n                this.#weatherData.days[dayInfo].conditions = value;\n            } else {\n                throw new Error(`Invalid input day value for setConditionsOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            throw new Error(`Error setting conditions data: ${e}`);\n        }\n    }\n\n    /**\n     * Retrieves the weather description for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @returns {string|null} - The weather description for the specified day.\n     */\n    getDescriptionOnDay(dayInfo) {\n        try {\n            if (typeof dayInfo === 'string') {\n                return this.#weatherData.days.find(day => day.datetime === dayInfo)?.description || null;\n            } else if (typeof dayInfo === 'number') {\n                return this.#weatherData.days[dayInfo]?.description || null;\n            } else {\n                throw new Error(`Invalid input value for getDescriptionOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            console.error(`Error accessing description data: ${e}`);\n            return null;\n        }\n    }\n\n    /**\n     * Sets the weather description for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @param {string} value - The new description to set.\n     */\n    setDescriptionOnDay(dayInfo, value) {\n        try {\n            if (typeof dayInfo === 'string') {\n                for (let day of this.#weatherData.days) {\n                    if (day.datetime === dayInfo) {\n                        day.description = value;\n                        break;\n                    }\n                }\n            } else if (typeof dayInfo === 'number') {\n                this.#weatherData.days[dayInfo].description = value;\n            } else {\n                throw new Error(`Invalid input day value for setDescriptionOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            throw new Error(`Error setting description data: ${e}`);\n        }\n    }\n\n    /**\n     * Retrieves the weather icon for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @returns {string|null} - The weather icon for the specified day.\n     */\n    getIconOnDay(dayInfo) {\n        try {\n            if (typeof dayInfo === 'string') {\n                return this.#weatherData.days.find(day => day.datetime === dayInfo)?.icon || null;\n            } else if (typeof dayInfo === 'number') {\n                return this.#weatherData.days[dayInfo]?.icon || null;\n            } else {\n                throw new Error(`Invalid input value for getIconOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            console.error(`Error accessing icon data: ${e}`);\n            return null;\n        }\n    }\n\n    /**\n     * Sets the weather icon for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @param {string} value - The new icon to set.\n     */\n    setIconOnDay(dayInfo, value) {\n        try {\n            if (typeof dayInfo === 'string') {\n                for (let day of this.#weatherData.days) {\n                    if (day.datetime === dayInfo) {\n                        day.icon = value;\n                        break;\n                    }\n                }\n            } else if (typeof dayInfo === 'number') {\n                this.#weatherData.days[dayInfo].icon = value;\n            } else {\n                throw new Error(`Invalid input day value for setIconOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            throw new Error(`Error setting icon data: ${e}`);\n        }\n    }\n\n    /**\n     * Retrieves the weather stations data for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @returns {Array|null} - The list of weather stations active on the specified day.\n     */\n    getStationsOnDay(dayInfo) {\n        try {\n            if (typeof dayInfo === 'string') {\n                return this.#weatherData.days.find(day => day.datetime === dayInfo)?.stations || null;\n            } else if (typeof dayInfo === 'number') {\n                return this.#weatherData.days[dayInfo]?.stations || null;\n            } else {\n                throw new Error(`Invalid input value for getStationsOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            console.error(`Error accessing stations data: ${e}`);\n            return null;\n        }\n    }\n\n    /**\n     * Sets the weather stations data for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @param {Array} value - The new list of weather stations to set.\n     */\n    setStationsOnDay(dayInfo, value) {\n        try {\n            if (typeof dayInfo === 'string') {\n                for (let day of this.#weatherData.days) {\n                    if (day.datetime === dayInfo) {\n                        day.stations = value;\n                        break;\n                    }\n                }\n            } else if (typeof dayInfo === 'number') {\n                this.#weatherData.days[dayInfo].stations = value;\n            } else {\n                throw new Error(`Invalid input day value for setStationsOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            throw new Error(`Error setting stations data: ${e}`);\n        }\n    }\n\n    /**\n     * Retrieves hourly weather data for a specific day identified by date or index.\n     * Optionally filters the data to include only specified elements.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @param {Array} elements - Optional list of keys to filter the hourly data.\n     * @returns {Array} - A list of hourly data dictionaries for the specified day.\n     */\n    getHourlyDataOnDay(dayInfo, elements = []) {\n        try {\n            let hourlyData;\n            if (typeof dayInfo === 'string') {\n                hourlyData = this.#weatherData.days.find(day => day.datetime === dayInfo)?.hours || [];\n            } else if (typeof dayInfo === 'number') {\n                hourlyData = this.#weatherData.days[dayInfo]?.hours || [];\n            } else {\n                throw new Error(`Invalid input value for getHourlyDataOnDay with str or int: ${dayInfo}`);\n            }\n\n            if (elements.length > 0) {\n                return hourlyData.map(hour => {\n                    const filtered = {};\n                    elements.forEach(el => {\n                        filtered[el] = hour[el];\n                    });\n                    return filtered;\n                });\n            }\n            return hourlyData;\n        } catch (e) {\n            throw new Error(`Error retrieving hourly data: ${e}`);\n        }\n    }\n\n    /**\n     * Sets the hourly weather data for a specific day identified by date or index.\n     * \n     * @param {string|number} dayInfo - The day's date as a string ('YYYY-MM-DD') or index as an integer.\n     * @param {Array} data - The new list of hourly weather data dictionaries to set.\n     */\n    setHourlyDataOnDay(dayInfo, data) {\n        try {\n            if (typeof dayInfo === 'string') {\n                for (let day of this.#weatherData.days) {\n                    if (day.datetime === dayInfo) {\n                        day.hours = data;\n                        break;\n                    }\n                }\n            } else if (typeof dayInfo === 'number') {\n                this.#weatherData.days[dayInfo].hours = data;\n            } else {\n                throw new Error(`Invalid input day value for setHourlyDataOnDay with str or int: ${dayInfo}`);\n            }\n        } catch (e) {\n            throw new Error(`Error setting hourly data: ${e}`);\n        }\n    }\n\n\n    /**\n     * Retrieves weather data for a specific date and time from the weather data collection.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index, pointing to a specific day in the data.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index, pointing to a specific time slot in the day's data.\n     * @param {Array} elements - Specific weather elements to retrieve.\n     * @returns {Object} The specific hourly data dictionary corresponding to the given day and time.\n     * @throws {Error} Propagates any exceptions that may occur during data retrieval.\n     */\n    getDataAtDatetime(dayInfo, timeInfo, elements = []) {\n        try {\n            const dayItem = Weather.filterItemByDatetimeVal(this.#weatherData.days, dayInfo);\n            const data = Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo);\n            if (elements.length) {\n                return extractSubobjectByKeys(data, elements);\n            } else {\n                return data;\n            }\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Sets weather data for a specific date and time in the weather data collection.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index, pointing to a specific day in the data.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index, pointing to a specific time slot in the day's data.\n     * @param {Object} data - The data dictionary to be set for the specific hourly time slot.\n     * @throws {Error} Propagates any exceptions that may occur during data setting.\n     */\n    setDataAtDatetime(dayInfo, timeInfo, data) {\n        try {\n            const dayItem = Weather.filterItemByDatetimeVal(this.#weatherData.days, dayInfo);\n            Weather.setItemByDatetimeVal(dayItem.hours, timeInfo, data);\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Updates weather data for a specific date and time in the weather data collection.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index, pointing to a specific day in the data.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index, pointing to a specific time slot in the day's data.\n     * @param {Object} data - The data dictionary to be updated for the specific hourly time slot.\n     * @throws {Error} Propagates any exceptions that may occur during data setting.\n     */\n    updateDataAtDatetime(dayInfo, timeInfo, data) {\n        try {\n            const dayItem = Weather.filterItemByDatetimeVal(this.#weatherData.days, dayInfo);\n            Weather.updateItemByDatetimeVal(dayItem.hours, timeInfo, data);\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Retrieves the epoch time for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @returns {number} The epoch time corresponding to the specific day and time.\n     * @throws {Error} Logs any exceptions that may occur during the retrieval.\n     */\n    getDatetimeEpochAtDatetime(dayInfo, timeInfo) {\n        try {\n            const dayItem = Weather.filterItemByDatetimeVal(this.#weatherData.days, dayInfo);\n            return Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).datetimeEpoch;\n        } catch (e) {\n            console.error(`An exception occurred: ${e.name} -> ${e.message}`);\n        }\n    }\n\n    /**\n     * Sets the epoch time for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @param {number} value - The epoch time value to be set.\n     * @throws {Error} Propagates any exceptions that may occur during the setting process.\n     */\n    setDatetimeEpochAtDatetime(dayInfo, timeInfo, value) {\n        try {\n            const dayItem = Weather.filterItemByDatetimeVal(this.#weatherData.days, dayInfo);\n            Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).datetimeEpoch = value;\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Retrieves the temperature for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @returns {number} The temperature at the specified datetime.\n     * @throws {Error} Logs any exceptions that may occur during the retrieval.\n     */\n    getTempAtDatetime(dayInfo, timeInfo) {\n        try {\n            const dayItem = Weather.filterItemByDatetimeVal(this.#weatherData.days, dayInfo);\n            return Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).temp;\n        } catch (e) {\n            console.error(`An exception occurred: ${e.name} -> ${e.message}`);\n        }\n    }\n\n    /**\n     * Sets the temperature for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @param {number} value - The temperature value to be set.\n     * @throws {Error} Propagates any exceptions that may occur during the setting process.\n     */\n    setTempAtDatetime(dayInfo, timeInfo, value) {\n        try {\n            const dayItem = Weather.filterItemByDatetimeVal(this.#weatherData.days, dayInfo);\n            Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).temp = value;\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Retrieves the 'feels like' temperature for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @returns {number} The 'feels like' temperature at the specified datetime.\n     * @throws {Error} Logs any exceptions that may occur during the retrieval.\n     */\n    getFeelsLikeAtDatetime(dayInfo, timeInfo) {\n        try {\n            const dayItem = Weather.filterItemByDatetimeVal(this.#weatherData.days, dayInfo);\n            return Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).feelslike;\n        } catch (e) {\n            console.error(`An exception occurred: ${e.name} -> ${e.message}`);\n        }\n    }\n\n    /**\n     * Sets the 'feels like' temperature for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @param {number} value - The 'feels like' temperature value to be set.\n     * @throws {Error} Propagates any exceptions that may occur during the setting process.\n     */\n    setFeelsLikeAtDatetime(dayInfo, timeInfo, value) {\n        try {\n            const dayItem = Weather.filterItemByDatetimeVal(this.#weatherData.days, dayInfo);\n            Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).feelslike = value;\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Retrieves the humidity for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @returns {number} The humidity percentage at the specified datetime.\n     * @throws {Error} Logs any exceptions that may occur during the retrieval.\n     */\n    getHumidityAtDatetime(dayInfo, timeInfo) {\n        try {\n            const dayItem = Weather.filterItemByDatetimeVal(this.#weatherData.days, dayInfo);\n            return Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).humidity;\n        } catch (e) {\n            console.error(`An exception occurred: ${e.name} -> ${e.message}`);\n        }\n    }\n\n    /**\n     * Sets the humidity for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @param {number} value - The humidity percentage to be set.\n     * @throws {Error} Propagates any exceptions that may occur during the setting process.\n     */\n    setHumidityAtDatetime(dayInfo, timeInfo, value) {\n        try {\n            const dayItem = Weather.filterItemByDatetimeVal(this.#weatherData.days, dayInfo);\n            Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).humidity = value;\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Retrieves the dew point temperature for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @returns {number} The dew point temperature at the specified datetime.\n     * @throws {Error} Logs any exceptions that may occur during the retrieval.\n     */\n    getDewAtDatetime(dayInfo, timeInfo) {\n        try {\n            const dayItem = Weather.filterItemByDatetimeVal(this.#weatherData.days, dayInfo);\n            return Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).dew;\n        } catch (e) {\n            console.error(`An exception occurred: ${e.name} -> ${e.message}`);\n        }\n    }\n\n    /**\n     * Sets the dew point temperature for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @param {number} value - The dew point temperature to be set.\n     * @throws {Error} Propagates any exceptions that may occur during the setting process.\n     */\n    setDewAtDatetime(dayInfo, timeInfo, value) {\n        try {\n            const dayItem = Weather.filterItemByDatetimeVal(this.#weatherData.days, dayInfo);\n            Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).dew = value;\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Retrieves the precipitation amount for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @returns {number} The precipitation amount at the specified datetime.\n     * @throws {Error} Logs any exceptions that may occur during the retrieval.\n     */\n    getPrecipAtDatetime(dayInfo, timeInfo) {\n        try {\n            const dayItem = Weather.filterItemByDatetimeVal(this.#weatherData.days, dayInfo);\n            return Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).precip;\n        } catch (e) {\n            console.error(`An exception occurred: ${e.name} -> ${e.message}`);\n        }\n    }\n\n    /**\n     * Sets the precipitation amount for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @param {number} value - The precipitation amount to be set.\n     * @throws {Error} Propagates any exceptions that may occur during the setting process.\n     */\n    setPrecipAtDatetime(dayInfo, timeInfo, value) {\n        try {\n            const dayItem = Weather.filterItemByDatetimeVal(this.#weatherData.days, dayInfo);\n            Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).precip = value;\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Retrieves the probability of precipitation for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @returns {number} The probability of precipitation at the specified datetime.\n     * @throws {Error} Logs any exceptions that may occur during the retrieval.\n     */\n    getPrecipProbAtDatetime(dayInfo, timeInfo) {\n        try {\n            const dayItem = Weather.filterItemByDatetimeVal(this.#weatherData.days, dayInfo);\n            return Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).precipprob;\n        } catch (e) {\n            console.error(`An exception occurred: ${e.name} -> ${e.message}`);\n        }\n    }\n\n    /**\n     * Sets the probability of precipitation for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @param {number} value - The probability of precipitation to be set.\n     * @throws {Error} Propagates any exceptions that may occur during the setting process.\n     */\n    setPrecipProbAtDatetime(dayInfo, timeInfo, value) {\n        try {\n            const dayItem = Weather.filterItemByDatetimeVal(this.#weatherData.days, dayInfo);\n            Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).precipprob = value;\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Retrieves the snow amount for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @returns {number} The snow amount at the specified datetime.\n     * @throws {Error} Logs any exceptions that may occur during the retrieval.\n     */\n    getSnowAtDatetime(dayInfo, timeInfo) {\n        try {\n            const dayItem = Weather.filterItemByDatetimeVal(this.#weatherData.days, dayInfo);\n            return Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).snow;\n        } catch (e) {\n            console.error(`An exception occurred: ${e.name} -> ${e.message}`);\n        }\n    }\n\n    /**\n     * Sets the snow amount for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @param {number} value - The snow amount to be set.\n     * @throws {Error} Propagates any exceptions that may occur during the setting process.\n     */\n    setSnowAtDatetime(dayInfo, timeInfo, value) {\n        try {\n            const dayItem = Weather.filterItemByDatetimeVal(this.#weatherData.days, dayInfo);\n            Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).snow = value;\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Retrieves the snow depth for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @returns {number} The snow depth at the specified datetime.\n     * @throws {Error} Logs any exceptions that may occur during the retrieval.\n     */\n    getSnowDepthAtDatetime(dayInfo, timeInfo) {\n        try {\n            const dayItem = Weather.filterItemByDatetimeVal(this.#weatherData.days, dayInfo);\n            return Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).snowdepth;\n        } catch (e) {\n            console.error(`An exception occurred: ${e.name} -> ${e.message}`);\n        }\n    }\n\n\n    /**\n     * Sets the snow depth for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @param {number} value - The snow depth to be set.\n     * @throws {Error} Propagates any exceptions that may occur during the setting process.\n     */\n    setSnowDepthAtDatetime(dayInfo, timeInfo, value) {\n        try {\n            const dayItem = Weather.filterItemByDatetimeVal(this.#weatherData.days, dayInfo);\n            Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).snowdepth = value;\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n * Retrieves the type of precipitation for a specific datetime within the weather data.\n *\n * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n * @returns {string} - The type of precipitation at the specified datetime.\n */\n    getPreciptypeAtDatetime(dayInfo, timeInfo) {\n        try {\n            let dayItem = Weather.filterItemByDatetimeVal(this.weatherData.days, dayInfo);\n            return Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).preciptype;\n        } catch (e) {\n            console.error(`An exception occurred: ${e.name} -> ${e.message}`);\n        }\n    }\n\n    /**\n     * Sets the type of precipitation for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @param {string} value - The type of precipitation to be set.\n     */\n    setPreciptypeAtDatetime(dayInfo, timeInfo, value) {\n        try {\n            let dayItem = Weather.filterItemByDatetimeVal(this.weatherData.days, dayInfo);\n            Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).preciptype = value;\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Retrieves the wind gust speed for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @returns {number} - The wind gust speed at the specified datetime.\n     */\n    getWindgustAtDatetime(dayInfo, timeInfo) {\n        try {\n            let dayItem = Weather.filterItemByDatetimeVal(this.weatherData.days, dayInfo);\n            return Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).windgust;\n        } catch (e) {\n            console.error(`An exception occurred: ${e.name} -> ${e.message}`);\n        }\n    }\n\n    /**\n     * Sets the wind gust speed for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @param {number} value - The wind gust speed to be set.\n     */\n    setWindgustAtDatetime(dayInfo, timeInfo, value) {\n        try {\n            let dayItem = Weather.filterItemByDatetimeVal(this.weatherData.days, dayInfo);\n            Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).windgust = value;\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Retrieves the wind speed for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @returns {number} - The wind speed at the specified datetime.\n     */\n    getWindspeedAtDatetime(dayInfo, timeInfo) {\n        try {\n            let dayItem = Weather.filterItemByDatetimeVal(this.weatherData.days, dayInfo);\n            return Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).windspeed;\n        } catch (e) {\n            console.error(`An exception occurred: ${e.name} -> ${e.message}`);\n        }\n    }\n\n    /**\n     * Sets the wind speed for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @param {number} value - The wind speed to be set.\n     */\n    setWindspeedAtDatetime(dayInfo, timeInfo, value) {\n        try {\n            let dayItem = Weather.filterItemByDatetimeVal(this.weatherData.days, dayInfo);\n            Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).windspeed = value;\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Retrieves the wind direction for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @returns {number} - The wind direction at the specified datetime.\n     */\n    getWinddirAtDatetime(dayInfo, timeInfo) {\n        try {\n            let dayItem = Weather.filterItemByDatetimeVal(this.weatherData.days, dayInfo);\n            return Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).winddir;\n        } catch (e) {\n            console.error(`An exception occurred: ${e.name} -> ${e.message}`);\n        }\n    }\n\n    /**\n     * Sets the wind direction for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @param {number} value - The wind direction to be set.\n     */\n    setWinddirAtDatetime(dayInfo, timeInfo, value) {\n        try {\n            let dayItem = Weather.filterItemByDatetimeVal(this.weatherData.days, dayInfo);\n            Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).winddir = value;\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Retrieves the atmospheric pressure for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @returns {number} - The atmospheric pressure at the specified datetime.\n     */\n    getPressureAtDatetime(dayInfo, timeInfo) {\n        try {\n            let dayItem = Weather.filterItemByDatetimeVal(this.weatherData.days, dayInfo);\n            return Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).pressure;\n        } catch (e) {\n            console.error(`An exception occurred: ${e.name} -> ${e.message}`);\n        }\n    }\n\n    /**\n     * Sets the atmospheric pressure for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @param {number} value - The atmospheric pressure to be set.\n     */\n    setPressureAtDatetime(dayInfo, timeInfo, value) {\n        try {\n            let dayItem = Weather.filterItemByDatetimeVal(this.weatherData.days, dayInfo);\n            Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).pressure = value;\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Retrieves the visibility for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @returns {number} - The visibility at the specified datetime.\n     */\n    getVisibilityAtDatetime(dayInfo, timeInfo) {\n        try {\n            let dayItem = Weather.filterItemByDatetimeVal(this.weatherData.days, dayInfo);\n            return Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).visibility;\n        } catch (e) {\n            console.error(`An exception occurred: ${e.name} -> ${e.message}`);\n        }\n    }\n\n    /**\n     * Sets the visibility for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @param {number} value - The visibility to be set.\n     */\n    setVisibilityAtDatetime(dayInfo, timeInfo, value) {\n        try {\n            let dayItem = Weather.filterItemByDatetimeVal(this.weatherData.days, dayInfo);\n            Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).visibility = value;\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Retrieves the cloud cover for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @returns {number} - The cloud cover at the specified datetime.\n     */\n    getCloudcoverAtDatetime(dayInfo, timeInfo) {\n        try {\n            let dayItem = Weather.filterItemByDatetimeVal(this.weatherData.days, dayInfo);\n            return Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).cloudcover;\n        } catch (e) {\n            console.error(`An exception occurred: ${e.name} -> ${e.message}`);\n        }\n    }\n\n    /**\n     * Sets the cloud cover for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @param {number} value - The cloud cover to be set.\n     */\n    setCloudcoverAtDatetime(dayInfo, timeInfo, value) {\n        try {\n            let dayItem = Weather.filterItemByDatetimeVal(this.weatherData.days, dayInfo);\n            Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).cloudcover = value;\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Retrieves the solar radiation for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @returns {number} - The solar radiation at the specified datetime.\n     */\n    getSolarradiationAtDatetime(dayInfo, timeInfo) {\n        try {\n            let dayItem = Weather.filterItemByDatetimeVal(this.weatherData.days, dayInfo);\n            return Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).solarradiation;\n        } catch (e) {\n            console.error(`An exception occurred: ${e.name} -> ${e.message}`);\n        }\n    }\n\n    /**\n     * Sets the solar radiation for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @param {number} value - The solar radiation to be set.\n     */\n    setSolarradiationAtDatetime(dayInfo, timeInfo, value) {\n        try {\n            let dayItem = Weather.filterItemByDatetimeVal(this.weatherData.days, dayInfo);\n            Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).solarradiation = value;\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Retrieves the solar energy for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @returns {number} - The solar energy at the specified datetime.\n     */\n    getSolarenergyAtDatetime(dayInfo, timeInfo) {\n        try {\n            let dayItem = Weather.filterItemByDatetimeVal(this.weatherData.days, dayInfo);\n            return Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).solarenergy;\n        } catch (e) {\n            console.error(`An exception occurred: ${e.name} -> ${e.message}`);\n        }\n    }\n\n    /**\n     * Sets the solar energy for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @param {number} value - The solar energy to be set.\n     */\n    setSolarenergyAtDatetime(dayInfo, timeInfo, value) {\n        try {\n            let dayItem = Weather.filterItemByDatetimeVal(this.weatherData.days, dayInfo);\n            Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).solarenergy = value;\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Retrieves the UV index for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @returns {number} - The UV index at the specified datetime.\n     */\n    getUvindexAtDatetime(dayInfo, timeInfo) {\n        try {\n            let dayItem = Weather.filterItemByDatetimeVal(this.weatherData.days, dayInfo);\n            return Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).uvindex;\n        } catch (e) {\n            console.error(`An exception occurred: ${e.name} -> ${e.message}`);\n        }\n    }\n\n    /**\n     * Sets the UV index for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @param {number} value - The UV index to be set.\n     */\n    setUvindexAtDatetime(dayInfo, timeInfo, value) {\n        try {\n            let dayItem = Weather.filterItemByDatetimeVal(this.weatherData.days, dayInfo);\n            Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).uvindex = value;\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Retrieves the severe risk for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @returns {number} - The severe risk at the specified datetime.\n     */\n    getSevereriskAtDatetime(dayInfo, timeInfo) {\n        try {\n            let dayItem = Weather.filterItemByDatetimeVal(this.weatherData.days, dayInfo);\n            return Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).severerisk;\n        } catch (e) {\n            console.error(`An exception occurred: ${e.name} -> ${e.message}`);\n        }\n    }\n\n    /**\n     * Sets the severe risk for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @param {number} value - The severe risk to be set.\n     */\n    setSevereriskAtDatetime(dayInfo, timeInfo, value) {\n        try {\n            let dayItem = Weather.filterItemByDatetimeVal(this.weatherData.days, dayInfo);\n            Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).severerisk = value;\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Retrieves the conditions for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @returns {string} - The conditions at the specified datetime.\n     */\n    getConditionsAtDatetime(dayInfo, timeInfo) {\n        try {\n            let dayItem = Weather.filterItemByDatetimeVal(this.weatherData.days, dayInfo);\n            return Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).conditions;\n        } catch (e) {\n            console.error(`An exception occurred: ${e.name} -> ${e.message}`);\n        }\n    }\n\n    /**\n     * Sets the conditions for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @param {string} value - The conditions to be set.\n     */\n    setConditionsAtDatetime(dayInfo, timeInfo, value) {\n        try {\n            let dayItem = Weather.filterItemByDatetimeVal(this.weatherData.days, dayInfo);\n            Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).conditions = value;\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Retrieves the weather icon for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @returns {string} - The weather icon at the specified datetime.\n     */\n    getIconAtDatetime(dayInfo, timeInfo) {\n        try {\n            let dayItem = Weather.filterItemByDatetimeVal(this.weatherData.days, dayInfo);\n            return Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).icon;\n        } catch (e) {\n            console.error(`An exception occurred: ${e.name} -> ${e.message}`);\n        }\n    }\n\n    /**\n     * Sets the weather icon for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @param {string} value - The weather icon to be set.\n     */\n    setIconAtDatetime(dayInfo, timeInfo, value) {\n        try {\n            let dayItem = Weather.filterItemByDatetimeVal(this.weatherData.days, dayInfo);\n            Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).icon = value;\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Retrieves the weather stations that were used for creating the observation for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @returns {string[]} - The weather stations that were used for creating the observation at the specified datetime.\n     */\n    getStationsAtDatetime(dayInfo, timeInfo) {\n        try {\n            let dayItem = Weather.filterItemByDatetimeVal(this.weatherData.days, dayInfo);\n            return Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).stations;\n        } catch (e) {\n            console.error(`An exception occurred: ${e.name} -> ${e.message}`);\n        }\n    }\n\n    /**\n     * Sets the weather stations that were used for creating the observation for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @param {string[]} value - The weather stations to be set.\n     */\n    setStationsAtDatetime(dayInfo, timeInfo, value) {\n        try {\n            let dayItem = Weather.filterItemByDatetimeVal(this.weatherData.days, dayInfo);\n            Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).stations = value;\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Retrieves the type of weather data used for this weather object for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @returns {string} - The type of weather data used for this weather object at the specified datetime.\n     *                     Values include historical observation (“obs”), forecast (“fcst”), historical forecast (“histfcst”) or statistical forecast (“stats”).\n     *                     If multiple types are used in the same day, “comb” is used. Today a combination of historical observations and forecast data.\n     */\n    getSourceAtDatetime(dayInfo, timeInfo) {\n        try {\n            let dayItem = Weather.filterItemByDatetimeVal(this.weatherData.days, dayInfo);\n            return Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).source;\n        } catch (e) {\n            console.error(`An exception occurred: ${e.name} -> ${e.message}`);\n        }\n    }\n\n    /**\n     * Sets the type of weather data used for this weather object for a specific datetime within the weather data.\n     *\n     * @param {string|number} dayInfo - A day identifier, which can be a date string (YYYY-MM-DD) or an index.\n     * @param {string|number} timeInfo - A time identifier, which can be a time string (HH:MM:SS) or an index.\n     * @param {string} value - The type of weather data to be set.\n     */\n    setSourceAtDatetime(dayInfo, timeInfo, value) {\n        try {\n            let dayItem = Weather.filterItemByDatetimeVal(this.weatherData.days, dayInfo);\n            Weather.filterItemByDatetimeVal(dayItem.hours, timeInfo).source = value;\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Clear the weather data of the class\n     */\n    clearWeatherData() {\n        this.#weatherData = {};\n    }\n}\n\nmodule.exports = { \n    Weather,\n    updateObject,\n    isValidObject,\n    extractSubobjectByKeys\n};\n","\n      import API from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../node_modules/css-loader/dist/cjs.js!./styles.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\noptions.insert = insertFn.bind(null, \"head\");\noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../node_modules/css-loader/dist/cjs.js!./styles.css\";\n       export default content && content.locals ? content.locals : undefined;\n","// main.js\n// import './styles/reset.css';\nimport './styles/styles.css';\nconst { Weather } = require('./Library/weather');\n\nfunction main() {\n\n\nconst apiKey = 'F87ECN6S8WZ7TDH8B6CNV7KA4';\nconst wxForm = document.querySelector('.weather-form');\nconst locationInput = document.querySelector('.location-input');\nconst usDate = new Date().toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'});\n\nconst currentLocation = document.getElementById('current-location');\nconst currentDate = document.getElementById('date');\nconst currentTemp = document.getElementById('current-temp');\n\nlet location = 'Myrtle Beach';\nconst today = new Date();\nconst tomorrow = new Date(today);\ntomorrow.setDate(today.getDate()+1);\n\nconst todayStr = getDateString(today);\nconst tomorrowStr = getDateString(tomorrow);\n//start with some default data  for my location\nshowWeather(location);\n//here is the main fetch using the Visual Crossing API library\nasync function showWeather(location){\n    try {\n            const weather = new Weather(apiKey);\n            // fetch from the Visual Crossing API\n            await weather.fetchWeatherData(\n                                        location, \n                                        todayStr, \n                                        tomorrowStr,\n                                        '',\n                                        'hours');\n            displayWeatherData(weather, location);\n        }\n        catch(error) {\n            console.error(error);\n            displayError(error);\n        }\n}\n\n//fetch on submit\nwxForm.addEventListener(\"submit\", async event => {\n    event.preventDefault();\n    const errorMessage = document.getElementById('error-message');\n    errorMessage.classList.remove('error-display');\n    \n    location = locationInput.value;\n    if(location){\n        showWeather(location);\n    } else{\n        displayError('ERROR: Enter a location')\n    }\n});\n//display error message\nfunction displayError(message){\n  const errorMessage = document.querySelector('.error-message');\n  errorMessage.classList.add('error-display');\n  errorMessage.textContent = '';\n  errorMessage.textContent = message;\n}\n\nfunction getDateString(date){\n    return date.toISOString().split('T')[0];\n}\nfunction displayWeatherData(weather, locationInput){\n    currentLocation.textContent = 'Current weather in ' + locationInput;\n    //long date\n    currentDate.textContent = usDate;\n   //values of interest to display\n    const weatherValues = weather.getDataOnDay(todayStr, \n        ['temp', 'icon', 'feelslike', 'description', 'conditions','tempmax', 'tempmin'\n    ]);\n    //the api tries to resolve locations and what it returns is not always obvious\n    //so let's display it if tehere is a value\n    const resolvedAddress = weather.getResolvedAddress();\n    const resolvedLocation = document.getElementById('resolved-location');\n    if(resolvedAddress){\n        resolvedLocation.textContent = \"(\" + resolvedAddress + \")\";\n    } else {\n        resolvedLocation.textContent = \"\";\n    }\n    //display the values\n    //big temp\n    currentTemp.textContent = weatherValues['temp']+'\\u00b0';\n    //weather icon\n    const imgElement = document.querySelector('#wx-icon img.weather-icon');\n    imgElement.src = './'+ weatherValues['icon'] + '.png';\n    //feels like\n    const feelsLike = document.getElementById('feels-like');\n    feelsLike.textContent = 'Feels like ' + weatherValues['feelslike'] +'\\u00b0' +'F';\n    //short description of conditions\n    const conditions = document.getElementById('conditions');\n    conditions.textContent = weatherValues['conditions'];\n    //high\n    const hiTemp = document.getElementById('hi');\n    hiTemp.textContent = 'High '+ weatherValues['tempmax']+'\\u00b0' +'F';\n    //low\n    const loTemp = document.getElementById('lo');\n    loTemp.textContent = 'Low ' + weatherValues['tempmin']+'\\u00b0' +'F';\n    //longer description\n    const wxMessage = document.getElementById('wx-message');\n    wxMessage.textContent = weatherValues['description']\n}\n\n};\n\n// Run the app\nmain();\n","\"use strict\";\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;","// utils.js\n\n/**\n * Update the original Object with values from the updates Object,\n * excluding keys specified in excludeKeys.\n *\n * @param {Object} original - The original Object to update.\n * @param {Object} updates - The Object with update values.\n * @param {Array} excludeKeys - A list of keys to exclude from updating.\n */\nfunction updateObject(original, updates, excludeKeys = []) {\n    for (const [key, value] of Object.entries(updates)) {\n        if (!excludeKeys.includes(key)) {\n            original[key] = value;\n        }\n    }\n}\n\n/**\n * Check if the variable is a Object and if all its keys are in the allowed keys.\n *\n * @param {Object} variable - The variable to check.\n * @param {Array} allowedKeys - A list of allowed keys.\n * @return {boolean} - True if variable is a Object and all keys are in allowedKeys, false otherwise.\n */\nfunction isValidObject(variable, allowedKeys) {\n    if (typeof variable === 'object' && !Array.isArray(variable) && variable !== null) {\n        return Object.keys(variable).every(key => allowedKeys.includes(key));\n    }\n    return false;\n}\n\n/**\n * Extract a sub-Object from the original Object with keys specified in keysList.\n *\n * @param {Object} originalDict - The original Object to extract from.\n * @param {Array} keysList - A list of keys to include in the sub-Object.\n * @return {Object} - A sub-Object containing only the specified keys.\n */\nfunction extractSubobjectByKeys(originalDict, keysList) {\n    const subDict = {};\n    keysList.forEach(key => {\n        if (key in originalDict) {\n            subDict[key] = originalDict[key];\n        }\n    });\n    return subDict;\n}\n\n// Export functions for use in other modules\nmodule.exports = {\n    updateObject,\n    isValidObject,\n    extractSubobjectByKeys\n};\n\n// Test cases\nif (require.main === module) {\n    const originalDict = { name: 'Alice', age: 30, location: 'New York', email: 'alice@example.com' };\n    const updatesDict = { name: 'Alice Smith', age: 31, location: 'Los Angeles', email: 'alice.smith@example.com' };\n    const keysToExclude = ['email'];\n\n    // Case: Test with a Object\n    updateObject(originalDict, updatesDict, keysToExclude);\n    console.log(originalDict);\n\n    const allowedKeys = ['name', 'age', 'email'];\n\n    // Case 1: Test with a valid Object\n    const validDict = { name: 'Alice', age: 30 };\n    console.log(isValidObject(validDict, allowedKeys));  // Output: true\n\n    // Case 2: Test with an invalid Object (extra key)\n    const invalidDict = { name: 'Bob', age: 25, location: 'City' };\n    console.log(isValidObject(invalidDict, allowedKeys));  // Output: false\n\n    // Case 3: Test with a non-Object variable\n    const notADict = ['name', 'Alice'];\n    console.log(isValidObject(notADict, allowedKeys));  // Output: false\n\n    const originalDict2 = {\n        name: 'John Doe',\n        age: 30,\n        email: 'johndoe@example.com',\n        country: 'USA'\n    };\n    const keysList = ['name', 'email'];\n\n    // Extracting the sub-Object\n    const subDict = extractSubobjectByKeys(originalDict2, keysList);\n    console.log(subDict);  // Output will be { name: 'John Doe', email: 'johndoe@example.com' }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the module cache\n__webpack_require__.c = __webpack_module_cache__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.nc = undefined;","// module cache are used so entry inlining is disabled\n// startup\n// Load entry module and return exports\nvar __webpack_exports__ = __webpack_require__(__webpack_require__.s = 808);\n"],"names":["module","exports","styleElement","nonce","setAttribute","stylesInDOM","getIndexByIdentifier","identifier","result","i","length","modulesToDom","list","options","idCountMap","identifiers","item","id","base","count","concat","indexByIdentifier","obj","css","media","sourceMap","supports","layer","references","updater","addElementStyle","byIndex","splice","push","api","domAPI","update","newObj","remove","lastIdentifiers","newList","index","newLastIdentifiers","_i","_index","styleSheet","cssText","firstChild","removeChild","appendChild","document","createTextNode","___CSS_LOADER_EXPORT___","HOURS","DATETIME","DATETIME_EPOCH","TEMPMAX","TEMPMIN","TEMP","FEELSLIKEMAX","FEELSLIKEMIN","FEELSLIKE","DEW","HUMIDITY","PRECIP","PRECIPPROB","PRECIPCOVER","PRECIPTYPE","SNOW","SNOWDEPTH","WINDGUST","WINDSPEED","WINDDIR","PRESSURE","CLOUDCOVER","VISIBILITY","SOLARRADIATION","SOLARENERGY","UVINDEX","SEVERERISK","SUNRISE","SUNRISE_EPOCH","SUNSET","SUNSET_EPOCH","MOONPHASE","CONDITIONS","DESCRIPTION","ICON","STATIONS","SOURCE","DAYS_KEYS","HOURS_KEYS","BASE_URL","QUERY_COST","LATITUDE","LONGITUDE","RESOLVED_ADDRESS","ADDRESS","TIMEZONE","TZOFFSET","DAYS","cssWithMappingToString","toString","this","map","content","needLayer","join","modules","dedupe","undefined","alreadyImportedModules","k","_k","cssMapping","btoa","base64","unescape","encodeURIComponent","JSON","stringify","data","sourceMapping","element","createElement","setAttributes","attributes","insert","memo","style","target","styleTarget","querySelector","window","HTMLIFrameElement","contentDocument","head","e","getTarget","Error","extractSubobjectByKeys","updateObject","isValidObject","Weather","constructor","apiKey","baseUrl","filterItemByDatetimeVal","src","datetimeVal","find","datetime","setItemByDatetimeVal","Object","assign","updateItemByDatetimeVal","fetchWeatherData","location","fromDate","toDate","unitGroup","include","elements","params","URLSearchParams","key","url","console","log","response","fetch","json","error","getWeatherData","setWeatherData","getWeatherDailyData","days","day","setWeatherDailyData","dailyData","getWeatherHourlyData","hourlyData","flatMap","hours","hourDt","getQueryCost","queryCost","setQueryCost","value","getLatitude","latitude","setLatitude","getLongitude","longitude","setLongitude","getResolvedAddress","resolvedAddress","setResolvedAddress","getAddress","address","setAddress","getTimezone","timezone","setTimezone","getTzoffset","tzoffset","setTzoffset","getStations","stations","setStations","getDailyDatetimes","Date","getHourlyDatetimes","hour","getDataOnDay","dayInfo","dayData","ValueError","setDataOnDay","getTempOnDay","temp","setTempOnDay","getTempmaxOnDay","tempmax","setTempmaxOnDay","getTempminOnDay","tempmin","setTempminOnDay","getFeelslikeOnDay","feelslike","setFeelslikeOnDay","getFeelslikemaxOnDay","feelslikemax","setFeelslikemaxOnDay","getFeelslikeminOnDay","feelslikemin","setFeelslikeminOnDay","getDewOnDay","dew","setDewOnDay","getHumidityOnDay","humidity","setHumidityOnDay","getPrecipOnDay","precip","setPrecipOnDay","getPrecipprobOnDay","precipprob","setPrecipprobOnDay","getPrecipcoverOnDay","precipcover","setPrecipcoverOnDay","getPreciptypeOnDay","preciptype","setPreciptypeOnDay","getSnowOnDay","snow","setSnowOnDay","getSnowdepthOnDay","snowdepth","setSnowdepthOnDay","getWindgustOnDay","windgust","setWindgustOnDay","getWindspeedOnDay","windspeed","setWindspeedOnDay","getWinddirOnDay","winddir","setWinddirOnDay","getPressureOnDay","pressure","setPressureOnDay","getCloudcoverOnDay","cloudcover","setCloudcoverOnDay","getVisibilityOnDay","visibility","setVisibilityOnDay","getSolarradiationOnDay","solarradiation","setSolarradiationOnDay","getSolarenergyOnDay","solarenergy","setSolarenergyOnDay","getUvindexOnDay","uvindex","setUvindexOnDay","getSevereriskOnDay","severerisk","setSevereriskOnDay","getSunriseOnDay","sunrise","setSunriseOnDay","getSunriseEpochOnDay","sunriseEpoch","setSunriseEpochOnDay","getSunsetOnDay","sunset","setSunsetOnDay","getSunsetEpochOnDay","sunsetEpoch","setSunsetEpochOnDay","getMoonphaseOnDay","moonphase","setMoonphaseOnDay","getConditionsOnDay","conditions","setConditionsOnDay","getDescriptionOnDay","description","setDescriptionOnDay","getIconOnDay","icon","setIconOnDay","getStationsOnDay","setStationsOnDay","getHourlyDataOnDay","filtered","forEach","el","setHourlyDataOnDay","getDataAtDatetime","timeInfo","dayItem","setDataAtDatetime","updateDataAtDatetime","getDatetimeEpochAtDatetime","datetimeEpoch","name","message","setDatetimeEpochAtDatetime","getTempAtDatetime","setTempAtDatetime","getFeelsLikeAtDatetime","setFeelsLikeAtDatetime","getHumidityAtDatetime","setHumidityAtDatetime","getDewAtDatetime","setDewAtDatetime","getPrecipAtDatetime","setPrecipAtDatetime","getPrecipProbAtDatetime","setPrecipProbAtDatetime","getSnowAtDatetime","setSnowAtDatetime","getSnowDepthAtDatetime","setSnowDepthAtDatetime","getPreciptypeAtDatetime","weatherData","setPreciptypeAtDatetime","getWindgustAtDatetime","setWindgustAtDatetime","getWindspeedAtDatetime","setWindspeedAtDatetime","getWinddirAtDatetime","setWinddirAtDatetime","getPressureAtDatetime","setPressureAtDatetime","getVisibilityAtDatetime","setVisibilityAtDatetime","getCloudcoverAtDatetime","setCloudcoverAtDatetime","getSolarradiationAtDatetime","setSolarradiationAtDatetime","getSolarenergyAtDatetime","setSolarenergyAtDatetime","getUvindexAtDatetime","setUvindexAtDatetime","getSevereriskAtDatetime","setSevereriskAtDatetime","getConditionsAtDatetime","setConditionsAtDatetime","getIconAtDatetime","setIconAtDatetime","getStationsAtDatetime","setStationsAtDatetime","getSourceAtDatetime","source","setSourceAtDatetime","clearWeatherData","styleTagTransform","insertStyleElement","locals","wxForm","locationInput","usDate","toLocaleDateString","year","month","currentLocation","getElementById","currentDate","currentTemp","today","tomorrow","setDate","getDate","todayStr","getDateString","tomorrowStr","async","showWeather","weather","textContent","weatherValues","displayWeatherData","displayError","errorMessage","classList","add","date","toISOString","split","addEventListener","event","preventDefault","main","apply","parentNode","removeStyleElement","original","updates","excludeKeys","entries","includes","variable","allowedKeys","Array","isArray","keys","every","originalDict","keysList","subDict","age","email","validDict","invalidDict","notADict","country","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","loaded","__webpack_modules__","c","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","prop","prototype","hasOwnProperty","call","nmd","paths","children","nc","s"],"sourceRoot":""}